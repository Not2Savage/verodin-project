'use strict';

exports.__esModule = true;
exports.createStringLiteral = createStringLiteral;
exports.createTempVarIdentifier = createTempVarIdentifier;
exports.createAssignmentExprStmt = createAssignmentExprStmt;
exports.createBlockExprStmt = createBlockExprStmt;
exports.createVarDeclaration = createVarDeclaration;
exports.createProcessScriptMethCall = createProcessScriptMethCall;
exports.createLocationGetWrapper = createLocationGetWrapper;
exports.createLocationSetWrapper = createLocationSetWrapper;
exports.createPropertySetWrapper = createPropertySetWrapper;
exports.createMethCallWrapper = createMethCallWrapper;
exports.createPropertyGetWrapper = createPropertyGetWrapper;
exports.createComputedPropertyGetWrapper = createComputedPropertyGetWrapper;
exports.createComputedPropertySetWrapper = createComputedPropertySetWrapper;
exports.createGetEvalMethCall = createGetEvalMethCall;
exports.createGetPostMessageMethCall = createGetPostMessageMethCall;
exports.createExpandedConcatOperation = createExpandedConcatOperation;
exports.createHtmlProcessorWrapper = createHtmlProcessorWrapper;

var _esotopeHammerhead = require('esotope-hammerhead');

var _internalLiteral = require('./internal-literal');

var _internalLiteral2 = _interopRequireDefault(_internalLiteral);

var _instruction = require('./instruction');

var _instruction2 = _interopRequireDefault(_instruction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createStringLiteral(value) {
    return {
        type: _esotopeHammerhead.Syntax.Literal,
        value: value,
        raw: `"${value}"`
    };
} // -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------
function createTempVarIdentifier() {
    return {
        type: _esotopeHammerhead.Syntax.Identifier,
        name: _internalLiteral2.default.tempVar
    };
}
function createAssignmentExprStmt(left, right) {
    return {
        type: _esotopeHammerhead.Syntax.ExpressionStatement,
        expression: {
            type: _esotopeHammerhead.Syntax.AssignmentExpression,
            operator: '=',
            left: left,
            right: right
        }
    };
}
function createBlockExprStmt(children) {
    return {
        type: _esotopeHammerhead.Syntax.BlockStatement,
        body: children
    };
}
function createVarDeclaration(identifier, init) {
    return {
        type: _esotopeHammerhead.Syntax.VariableDeclaration,
        declarations: [{
            type: _esotopeHammerhead.Syntax.VariableDeclarator,
            id: identifier,
            init: init || null
        }],
        kind: 'var'
    };
}
function createProcessScriptMethCall(arg, isApply) {
    const ast = {
        type: _esotopeHammerhead.Syntax.CallExpression,
        callee: {
            type: _esotopeHammerhead.Syntax.Identifier,
            name: _instruction2.default.processScript
        },
        arguments: [arg]
    };
    if (isApply) {
        ast.arguments.push({
            type: _esotopeHammerhead.Syntax.Literal,
            value: true,
            raw: 'true'
        });
    }
    return ast;
}
function createLocationGetWrapper() {
    return {
        type: _esotopeHammerhead.Syntax.CallExpression,
        callee: {
            type: _esotopeHammerhead.Syntax.Identifier,
            name: _instruction2.default.getLocation
        },
        arguments: [{
            type: _esotopeHammerhead.Syntax.Identifier,
            name: 'location'
        }]
    };
}
function createLocationSetWrapper(value, wrapWithSequence) {
    const tempIdentifier = createTempVarIdentifier();
    const locationIdentifier = {
        type: _esotopeHammerhead.Syntax.Identifier,
        name: 'location'
    };
    let wrapper = {
        type: _esotopeHammerhead.Syntax.CallExpression,
        callee: {
            type: _esotopeHammerhead.Syntax.MemberExpression,
            computed: false,
            object: {
                type: _esotopeHammerhead.Syntax.FunctionExpression,
                id: null,
                params: [],
                defaults: [],
                body: {
                    type: _esotopeHammerhead.Syntax.BlockStatement,
                    body: [createVarDeclaration(tempIdentifier, value), {
                        type: _esotopeHammerhead.Syntax.ReturnStatement,
                        argument: {
                            type: _esotopeHammerhead.Syntax.LogicalExpression,
                            operator: '||',
                            left: {
                                type: _esotopeHammerhead.Syntax.CallExpression,
                                callee: {
                                    type: _esotopeHammerhead.Syntax.Identifier,
                                    name: _instruction2.default.setLocation
                                },
                                arguments: [locationIdentifier, tempIdentifier]
                            },
                            right: {
                                type: _esotopeHammerhead.Syntax.AssignmentExpression,
                                operator: '=',
                                left: locationIdentifier,
                                right: tempIdentifier
                            }
                        }
                    }]
                },
                rest: null,
                generator: false,
                expression: false
            },
            property: {
                type: _esotopeHammerhead.Syntax.Identifier,
                name: 'call'
            }
        },
        arguments: [{
            type: _esotopeHammerhead.Syntax.ThisExpression
        }]
    };
    if (wrapWithSequence) {
        wrapper = {
            type: _esotopeHammerhead.Syntax.SequenceExpression,
            expressions: [{
                type: 'Literal',
                value: 0,
                raw: '0'
            }, wrapper]
        };
    }
    return wrapper;
}
function createPropertySetWrapper(propertyName, obj, value) {
    return {
        type: _esotopeHammerhead.Syntax.CallExpression,
        callee: {
            type: _esotopeHammerhead.Syntax.Identifier,
            name: _instruction2.default.setProperty
        },
        arguments: [obj, createStringLiteral(propertyName), value]
    };
}
function createMethCallWrapper(owner, meth, args) {
    return {
        type: _esotopeHammerhead.Syntax.CallExpression,
        callee: {
            type: _esotopeHammerhead.Syntax.Identifier,
            name: _instruction2.default.callMethod
        },
        arguments: [owner, meth, {
            type: _esotopeHammerhead.Syntax.ArrayExpression,
            elements: args
        }]
    };
}
function createPropertyGetWrapper(propertyName, owner) {
    return {
        type: _esotopeHammerhead.Syntax.CallExpression,
        callee: {
            type: _esotopeHammerhead.Syntax.Identifier,
            name: _instruction2.default.getProperty
        },
        arguments: [owner, createStringLiteral(propertyName)]
    };
}
function createComputedPropertyGetWrapper(property, owner) {
    return {
        type: _esotopeHammerhead.Syntax.CallExpression,
        callee: {
            type: _esotopeHammerhead.Syntax.Identifier,
            name: _instruction2.default.getProperty
        },
        arguments: [owner, property]
    };
}
function createComputedPropertySetWrapper(property, owner, value) {
    return {
        type: _esotopeHammerhead.Syntax.CallExpression,
        callee: {
            type: _esotopeHammerhead.Syntax.Identifier,
            name: _instruction2.default.setProperty
        },
        arguments: [owner, property, value]
    };
}
function createGetEvalMethCall(node) {
    return {
        type: _esotopeHammerhead.Syntax.CallExpression,
        callee: {
            type: _esotopeHammerhead.Syntax.Identifier,
            name: _instruction2.default.getEval
        },
        arguments: [node]
    };
}
function createGetPostMessageMethCall(node) {
    const parentObject = node.object;
    return {
        type: _esotopeHammerhead.Syntax.CallExpression,
        callee: {
            type: _esotopeHammerhead.Syntax.Identifier,
            name: _instruction2.default.getPostMessage
        },
        arguments: parentObject ? [parentObject] : [{
            type: _esotopeHammerhead.Syntax.Literal,
            value: null
        }, node]
    };
}
function createExpandedConcatOperation(left, right) {
    return {
        type: _esotopeHammerhead.Syntax.AssignmentExpression,
        operator: '=',
        left: left,
        right: {
            type: _esotopeHammerhead.Syntax.BinaryExpression,
            operator: '+',
            left: left,
            right: right
        }
    };
}
function createHtmlProcessorWrapper(node) {
    return {
        type: _esotopeHammerhead.Syntax.ExpressionStatement,
        expression: {
            type: _esotopeHammerhead.Syntax.CallExpression,
            callee: {
                type: _esotopeHammerhead.Syntax.MemberExpression,
                object: {
                    type: _esotopeHammerhead.Syntax.Identifier,
                    name: 'parent'
                },
                property: {
                    type: _esotopeHammerhead.Syntax.Identifier,
                    name: _instruction2.default.processHtml
                }
            },
            arguments: [{
                type: _esotopeHammerhead.Syntax.Identifier,
                name: 'window'
            }, node.expression]
        }
    };
}