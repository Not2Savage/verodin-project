'use strict';

exports.__esModule = true;
exports.PreparedResponseInfo = exports.ResponseInfo = exports.RequestInfo = undefined;

var _sameOriginCheckFailedStatusCode = require('../../request-pipeline/xhr/same-origin-check-failed-status-code');

var _sameOriginCheckFailedStatusCode2 = _interopRequireDefault(_sameOriginCheckFailedStatusCode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class RequestInfo {
    constructor(ctx, opts) {
        this.requestId = ctx.requestId;
        this.userAgent = opts.headers['user-agent'];
        this.url = opts.url;
        this.method = opts.method.toLowerCase();
        this.isAjax = ctx.isXhr || ctx.isFetch;
        this.headers = opts.headers;
        this.body = opts.body;
        this.sessionId = ctx.session.id;
    }
}
exports.RequestInfo = RequestInfo; /*eslint-enable no-unused-vars*/

class ResponseInfo {
    constructor(ctx) {
        this.requestId = ctx.requestId;
        this.headers = ctx.destRes.headers;
        this.body = ctx.nonProcessedDestResBody;
        this.statusCode = ctx.isSameOriginPolicyFailed ? _sameOriginCheckFailedStatusCode2.default : ctx.destRes.statusCode;
        this.sessionId = ctx.session.id;
    }
}
exports.ResponseInfo = ResponseInfo;
class PreparedResponseInfo {
    constructor(responseInfo, opts) {
        this.requestId = responseInfo.requestId;
        this.statusCode = responseInfo.statusCode;
        this.sessionId = responseInfo.sessionId;
        if (opts.includeHeaders) this.headers = responseInfo.headers;
        if (opts.includeBody) this.body = responseInfo.body;
    }
}
exports.PreparedResponseInfo = PreparedResponseInfo;