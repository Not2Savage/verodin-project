'use strict';

exports.__esModule = true;
exports.removeTTYColors = removeTTYColors;
exports.wordWrap = wordWrap;
exports.splitQuotedText = splitQuotedText;
exports.replaceLeadingSpacesWithNbsp = replaceLeadingSpacesWithNbsp;
exports.getPluralSuffix = getPluralSuffix;
exports.getConcatenatedValuesString = getConcatenatedValuesString;
exports.getToBeInPastTense = getToBeInPastTense;

var _indentString = require('indent-string');

var _indentString2 = _interopRequireDefault(_indentString);

var _lodash = require('lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function rtrim(str) {
    return str.replace(/\s+$/, '');
}

function removeTTYColors(str) {
    return str.replace(/\033\[[0-9;]*m/g, '');
}

function wordWrap(str, indent, width) {
    let curStr = '';
    let wrappedMsg = '';

    if (removeTTYColors(str).length <= width - indent) return (0, _indentString2.default)(str, ' ', indent);

    str = str.replace(/(\r\n)/gm, '\n').split(/(\S+[ \t]+)|(\S+(?:\n))|(\n)/m)
    //NOTE: cut empty elements
    .filter(elm => !!elm);

    str.forEach(word => {
        const newStr = curStr + word;

        if (removeTTYColors(newStr).length > width - indent) {
            wrappedMsg += `${rtrim(curStr)}\n`;
            curStr = word;
        } else {
            if (curStr[curStr.length - 1] === '\n') {
                wrappedMsg += `${rtrim(curStr)}\n`;
                curStr = '';
            }

            curStr += word;
        }
    });

    return (0, _indentString2.default)(wrappedMsg + curStr, ' ', indent);
}

function splitQuotedText(str, splitChar, quotes = '"\'') {
    let currentPart = '';
    const parts = [];
    let quoteChar = null;

    for (let i = 0; i < str.length; i++) {
        const currentChar = str[i];

        if (currentChar === splitChar) {
            if (quoteChar) currentPart += currentChar;else {
                parts.push(currentPart);
                currentPart = '';
            }
        } else if (quotes.indexOf(currentChar) > -1) {
            if (quoteChar === currentChar) quoteChar = null;else if (!quoteChar) quoteChar = currentChar;else currentPart += currentChar;
        } else currentPart += currentChar;
    }

    if (currentPart) parts.push(currentPart);

    return parts;
}

function replaceLeadingSpacesWithNbsp(str) {
    return str.replace(/^ +/mg, match => {
        return (0, _lodash.repeat)('&nbsp;', match.length);
    });
}

function getPluralSuffix(array) {
    return array.length > 1 ? 's' : '';
}

function getConcatenatedValuesString(array) {
    return array.map(item => `"${item}"`).join(', ');
}

function getToBeInPastTense(array) {
    return array.length > 1 ? 'were' : 'was';
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9zdHJpbmcuanMiXSwibmFtZXMiOlsicmVtb3ZlVFRZQ29sb3JzIiwid29yZFdyYXAiLCJzcGxpdFF1b3RlZFRleHQiLCJyZXBsYWNlTGVhZGluZ1NwYWNlc1dpdGhOYnNwIiwiZ2V0UGx1cmFsU3VmZml4IiwiZ2V0Q29uY2F0ZW5hdGVkVmFsdWVzU3RyaW5nIiwiZ2V0VG9CZUluUGFzdFRlbnNlIiwicnRyaW0iLCJzdHIiLCJyZXBsYWNlIiwiaW5kZW50Iiwid2lkdGgiLCJjdXJTdHIiLCJ3cmFwcGVkTXNnIiwibGVuZ3RoIiwic3BsaXQiLCJmaWx0ZXIiLCJlbG0iLCJmb3JFYWNoIiwid29yZCIsIm5ld1N0ciIsInNwbGl0Q2hhciIsInF1b3RlcyIsImN1cnJlbnRQYXJ0IiwicGFydHMiLCJxdW90ZUNoYXIiLCJpIiwiY3VycmVudENoYXIiLCJwdXNoIiwiaW5kZXhPZiIsIm1hdGNoIiwiYXJyYXkiLCJtYXAiLCJpdGVtIiwiam9pbiJdLCJtYXBwaW5ncyI6Ijs7O1FBT2dCQSxlLEdBQUFBLGU7UUFJQUMsUSxHQUFBQSxRO1FBZ0NBQyxlLEdBQUFBLGU7UUFrQ0FDLDRCLEdBQUFBLDRCO1FBTUFDLGUsR0FBQUEsZTtRQUlBQywyQixHQUFBQSwyQjtRQUlBQyxrQixHQUFBQSxrQjs7QUEzRmhCOzs7O0FBQ0E7Ozs7QUFFQSxTQUFTQyxLQUFULENBQWdCQyxHQUFoQixFQUFxQjtBQUNqQixXQUFPQSxJQUFJQyxPQUFKLENBQVksTUFBWixFQUFvQixFQUFwQixDQUFQO0FBQ0g7O0FBRU0sU0FBU1QsZUFBVCxDQUEwQlEsR0FBMUIsRUFBK0I7QUFDbEMsV0FBT0EsSUFBSUMsT0FBSixDQUFZLGlCQUFaLEVBQStCLEVBQS9CLENBQVA7QUFDSDs7QUFFTSxTQUFTUixRQUFULENBQW1CTyxHQUFuQixFQUF3QkUsTUFBeEIsRUFBZ0NDLEtBQWhDLEVBQXVDO0FBQzFDLFFBQUlDLFNBQWEsRUFBakI7QUFDQSxRQUFJQyxhQUFhLEVBQWpC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b3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaW5kZW50U3RyaW5nIGZyb20gJ2luZGVudC1zdHJpbmcnO1xuaW1wb3J0IHsgcmVwZWF0IH0gZnJvbSAnbG9kYXNoJztcblxuZnVuY3Rpb24gcnRyaW0gKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvXFxzKyQvLCAnJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVUVFlDb2xvcnMgKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvXFwwMzNcXFtbMC05O10qbS9nLCAnJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3b3JkV3JhcCAoc3RyLCBpbmRlbnQsIHdpZHRoKSB7XG4gICAgbGV0IGN1clN0ciAgICAgPSAnJztcbiAgICBsZXQgd3JhcHBlZE1zZyA9ICcnO1xuXG4gICAgaWYgKHJlbW92ZVRUWUNvbG9ycyhzdHIpLmxlbmd0aCA8PSB3aWR0aCAtIGluZGVudClcbiAgICAgICAgcmV0dXJuIGluZGVudFN0cmluZyhzdHIsICcgJywgaW5kZW50KTtcblxuICAgIHN0ciA9IHN0ci5yZXBsYWNlKC8oXFxyXFxuKS9nbSwgJ1xcbicpXG4gICAgICAgIC5zcGxpdCgvKFxcUytbIFxcdF0rKXwoXFxTKyg/OlxcbikpfChcXG4pL20pXG4gICAgICAgIC8vTk9URTogY3V0IGVtcHR5IGVsZW1lbnRzXG4gICAgICAgIC5maWx0ZXIoZWxtID0+ICEhZWxtKTtcblxuICAgIHN0ci5mb3JFYWNoKHdvcmQgPT4ge1xuICAgICAgICBjb25zdCBuZXdTdHIgPSBjdXJTdHIgKyB3b3JkO1xuXG4gICAgICAgIGlmIChyZW1vdmVUVFlDb2xvcnMobmV3U3RyKS5sZW5ndGggPiB3aWR0aCAtIGluZGVudCkge1xuICAgICAgICAgICAgd3JhcHBlZE1zZyArPSBgJHtydHJpbShjdXJTdHIpfVxcbmA7XG4gICAgICAgICAgICBjdXJTdHIgPSB3b3JkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGN1clN0cltjdXJTdHIubGVuZ3RoIC0gMV0gPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgd3JhcHBlZE1zZyArPSBgJHtydHJpbShjdXJTdHIpfVxcbmA7XG4gICAgICAgICAgICAgICAgY3VyU3RyID0gJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1clN0ciArPSB3b3JkO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gaW5kZW50U3RyaW5nKHdyYXBwZWRNc2cgKyBjdXJTdHIsICcgJywgaW5kZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0UXVvdGVkVGV4dCAoc3RyLCBzcGxpdENoYXIsIHF1b3RlcyA9ICdcIlxcJycpIHtcbiAgICBsZXQgY3VycmVudFBhcnQgPSAnJztcbiAgICBjb25zdCBwYXJ0cyAgICAgICA9IFtdO1xuICAgIGxldCBxdW90ZUNoYXIgICA9IG51bGw7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjdXJyZW50Q2hhciA9IHN0cltpXTtcblxuICAgICAgICBpZiAoY3VycmVudENoYXIgPT09IHNwbGl0Q2hhcikge1xuICAgICAgICAgICAgaWYgKHF1b3RlQ2hhcilcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFydCArPSBjdXJyZW50Q2hhcjtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goY3VycmVudFBhcnQpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRQYXJ0ID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocXVvdGVzLmluZGV4T2YoY3VycmVudENoYXIpID4gLTEpIHtcbiAgICAgICAgICAgIGlmIChxdW90ZUNoYXIgPT09IGN1cnJlbnRDaGFyKVxuICAgICAgICAgICAgICAgIHF1b3RlQ2hhciA9IG51bGw7XG4gICAgICAgICAgICBlbHNlIGlmICghcXVvdGVDaGFyKVxuICAgICAgICAgICAgICAgIHF1b3RlQ2hhciA9IGN1cnJlbnRDaGFyO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGN1cnJlbnRQYXJ0ICs9IGN1cnJlbnRDaGFyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGN1cnJlbnRQYXJ0ICs9IGN1cnJlbnRDaGFyO1xuICAgIH1cblxuICAgIGlmIChjdXJyZW50UGFydClcbiAgICAgICAgcGFydHMucHVzaChjdXJyZW50UGFydCk7XG5cbiAgICByZXR1cm4gcGFydHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlTGVhZGluZ1NwYWNlc1dpdGhOYnNwIChzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoL14gKy9tZywgbWF0Y2ggPT4ge1xuICAgICAgICByZXR1cm4gcmVwZWF0KCcmbmJzcDsnLCBtYXRjaC5sZW5ndGgpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGx1cmFsU3VmZml4IChhcnJheSkge1xuICAgIHJldHVybiBhcnJheS5sZW5ndGggPiAxID8gJ3MnIDogJyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb25jYXRlbmF0ZWRWYWx1ZXNTdHJpbmcgKGFycmF5KSB7XG4gICAgcmV0dXJuIGFycmF5Lm1hcChpdGVtID0+IGBcIiR7aXRlbX1cImApLmpvaW4oJywgJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb0JlSW5QYXN0VGVuc2UgKGFycmF5KSB7XG4gICAgcmV0dXJuIGFycmF5Lmxlbmd0aCA+IDEgPyAnd2VyZScgOiAnd2FzJztcbn1cblxuIl19
