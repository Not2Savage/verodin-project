'use strict';

exports.__esModule = true;
exports.assertUrl = assertUrl;
exports.resolvePageUrl = resolvePageUrl;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _runtime = require('../errors/runtime');

var _types = require('../errors/types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const PROTOCOL_RE = /^([\w-]+?)(?=:\/\/)/;
const SUPPORTED_PROTOCOL_RE = /^(https?|file):/;
const IMPLICIT_PROTOCOL_RE = /^\/\//;
const ABSOLUTE_PATH_RE = /^\/[^/]/;
const WIN_ABSOLUTE_PATH_RE = /^\w:[/\\]/;
const RELATIVE_PATH_RE = /^\.\.?[/\\]/;

function isAbsolutePath(url) {
    return _osFamily2.default.win ? WIN_ABSOLUTE_PATH_RE.test(url) : ABSOLUTE_PATH_RE.test(url);
}

function resolveFileUrl(url, testFileName) {
    const testFileDir = _path2.default.dirname(testFileName);

    if (RELATIVE_PATH_RE.test(url)) url = _path2.default.join(testFileDir, url);

    return 'file://' + url;
}

function assertUrl(url, callsiteName) {
    const protocol = url.match(PROTOCOL_RE);
    const hasUnsupportedProtocol = protocol && !SUPPORTED_PROTOCOL_RE.test(url);
    const isWinAbsolutePath = _osFamily2.default.win && WIN_ABSOLUTE_PATH_RE.test(url);

    if (hasUnsupportedProtocol && !isWinAbsolutePath && url !== 'about:blank') throw new _runtime.APIError(callsiteName, _types.RUNTIME_ERRORS.unsupportedUrlProtocol, url, protocol[0]);
}

function resolvePageUrl(url, testFileName) {
    if (SUPPORTED_PROTOCOL_RE.test(url) || url === 'about:blank') return url;

    if (isAbsolutePath(url) || RELATIVE_PATH_RE.test(url)) return resolveFileUrl(url, testFileName);

    const protocol = IMPLICIT_PROTOCOL_RE.test(url) ? 'http:' : 'http://';

    return protocol + url;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvdGVzdC1wYWdlLXVybC5qcyJdLCJuYW1lcyI6WyJhc3NlcnRVcmwiLCJyZXNvbHZlUGFnZVVybCIsIlBST1RPQ09MX1JFIiwiU1VQUE9SVEVEX1BST1RPQ09MX1JFIiwiSU1QTElDSVRfUFJPVE9DT0xfUkUiLCJBQlNPTFVURV9QQVRIX1JFIiwiV0lOX0FCU09MVVRFX1BBVEhfUkUiLCJSRUxBVElWRV9QQVRIX1JFIiwiaXNBYnNvbHV0ZVBhdGgiLCJ1cmwiLCJPUyIsIndpbiIsInRlc3QiLCJyZXNvbHZlRmlsZVVybCIsInRlc3RGaWxlTmFtZSIsInRlc3RGaWxlRGlyIiwicGF0aCIsImRpcm5hbWUiLCJqb2luIiwiY2FsbHNpdGVOYW1lIiwicHJvdG9jb2wiLCJtYXRjaCIsImhhc1Vuc3VwcG9ydGVkUHJvdG9jb2wiLCJpc1dpbkFic29sdXRlUGF0aCIsIkFQSUVycm9yIiwiUlVOVElNRV9FUlJPUlMiLCJ1bnN1cHBvcnRlZFVybFByb3RvY29sIl0sIm1hcHBpbmdzIjoiOzs7UUEwQmdCQSxTLEdBQUFBLFM7UUFTQUMsYyxHQUFBQSxjOztBQW5DaEI7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUMsY0FBd0IscUJBQTlCO0FBQ0EsTUFBTUMsd0JBQXdCLGlCQUE5QjtBQUNBLE1BQU1DLHVCQUF3QixPQUE5QjtBQUNBLE1BQU1DLG1CQUF3QixTQUE5QjtBQUNBLE1BQU1DLHVCQUF3QixXQUE5QjtBQUNBLE1BQU1DLG1CQUF3QixhQUE5Qjs7QUFHQSxTQUFTQyxjQUFULENBQXlCQyxHQUF6QixFQUE4QjtBQUMxQixXQUFPQyxtQkFBR0MsR0FBSCxHQUFTTCxxQkFBcUJNLElBQXJCLENBQTBCSCxHQUExQixDQUFULEdBQTBDSixpQkFBaUJPLElBQWpCLENBQXNCSCxHQUF0QixDQUFqRDtBQUNIOztBQUVELFNBQVNJLGNBQVQsQ0FBeUJKLEdBQXpCLEVBQThCSyxZQUE5QixFQUE0QztBQUN4QyxVQUFNQyxjQUFjQyxlQUFLQyxPQUFMLENBQWFILFlBQWIsQ0FBcEI7O0FBRUEsUUFBSVAsaUJBQWlCSyxJQUFqQixDQUFzQkgsR0FBdEIsQ0FBSixFQUNJQSxNQUFNTyxlQUFLRSxJQUFMLENBQVVILFdBQVYsRUFBdUJOLEdBQXZCLENBQU47O0FBRUosV0FBTyxZQUFZQSxHQUFuQjtBQUNIOztBQUVNLFNBQVNULFNBQVQsQ0FBb0JTLEdBQXBCLEVBQXlCVSxZQUF6QixFQUF1QztBQUMxQyxVQUFNQyxXQUF5QlgsSUFBSVksS0FBSixDQUFVbkIsV0FBVixDQUEvQjtBQUNBLFVBQU1vQix5QkFBeUJGLFlBQVksQ0FBQ2pCLHNCQUFzQlMsSUFBdEIsQ0FBMkJILEdBQTNCLENBQTVDO0FBQ0EsVUFBTWMsb0JBQXlCYixtQkFBR0MsR0FBSCxJQUFVTCxxQkFBcUJNLElBQXJCLENBQTBCSCxHQUExQixDQUF6Qzs7QUFFQSxRQUFJYSwwQkFBMEIsQ0FBQ0MsaUJBQTNCLElBQWdEZCxRQUFRLGFBQTVELEVBQ0ksTUFBTSxJQUFJZSxpQkFBSixDQUFhTCxZQUFiLEVBQTJCTSxzQkFBZUMsc0JBQTFDLEVBQWtFakIsR0FBbEUsRUFBdUVXLFNBQVMsQ0FBVCxDQUF2RSxDQUFOO0FBQ1A7O0FBRU0sU0FBU25CLGNBQVQsQ0FBeUJRLEdBQXpCLEVBQThCSyxZQUE5QixFQUE0QztBQUMvQyxRQUFJWCxzQkFBc0JTLElBQXRCLENBQTJCSCxHQUEzQixLQUFtQ0EsUUFBUSxhQUEvQyxFQUNJLE9BQU9BLEdBQVA7O0FBRUosUUFBSUQsZUFBZUMsR0FBZixLQUF1QkYsaUJBQWlCSyxJQUFqQixDQUFzQkgsR0FBdEIsQ0FBM0IsRUFDSSxPQUFPSSxlQUFlSixHQUFmLEVBQW9CSyxZQUFwQixDQUFQOztBQUVKLFVBQU1NLFdBQVdoQixxQkFBcUJRLElBQXJCLENBQTBCSCxHQUExQixJQUFpQyxPQUFqQyxHQUEyQyxTQUE1RDs7QUFFQSxXQUFPVyxXQUFXWCxHQUFsQjtBQUNIIiwiZmlsZSI6ImFwaS90ZXN0LXBhZ2UtdXJsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgT1MgZnJvbSAnb3MtZmFtaWx5JztcbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL3J1bnRpbWUnO1xuaW1wb3J0IHsgUlVOVElNRV9FUlJPUlMgfSBmcm9tICcuLi9lcnJvcnMvdHlwZXMnO1xuXG5jb25zdCBQUk9UT0NPTF9SRSAgICAgICAgICAgPSAvXihbXFx3LV0rPykoPz06XFwvXFwvKS87XG5jb25zdCBTVVBQT1JURURfUFJPVE9DT0xfUkUgPSAvXihodHRwcz98ZmlsZSk6LztcbmNvbnN0IElNUExJQ0lUX1BST1RPQ09MX1JFICA9IC9eXFwvXFwvLztcbmNvbnN0IEFCU09MVVRFX1BBVEhfUkUgICAgICA9IC9eXFwvW14vXS87XG5jb25zdCBXSU5fQUJTT0xVVEVfUEFUSF9SRSAgPSAvXlxcdzpbL1xcXFxdLztcbmNvbnN0IFJFTEFUSVZFX1BBVEhfUkUgICAgICA9IC9eXFwuXFwuP1svXFxcXF0vO1xuXG5cbmZ1bmN0aW9uIGlzQWJzb2x1dGVQYXRoICh1cmwpIHtcbiAgICByZXR1cm4gT1Mud2luID8gV0lOX0FCU09MVVRFX1BBVEhfUkUudGVzdCh1cmwpIDogQUJTT0xVVEVfUEFUSF9SRS50ZXN0KHVybCk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVGaWxlVXJsICh1cmwsIHRlc3RGaWxlTmFtZSkge1xuICAgIGNvbnN0IHRlc3RGaWxlRGlyID0gcGF0aC5kaXJuYW1lKHRlc3RGaWxlTmFtZSk7XG5cbiAgICBpZiAoUkVMQVRJVkVfUEFUSF9SRS50ZXN0KHVybCkpXG4gICAgICAgIHVybCA9IHBhdGguam9pbih0ZXN0RmlsZURpciwgdXJsKTtcblxuICAgIHJldHVybiAnZmlsZTovLycgKyB1cmw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRVcmwgKHVybCwgY2FsbHNpdGVOYW1lKSB7XG4gICAgY29uc3QgcHJvdG9jb2wgICAgICAgICAgICAgICA9IHVybC5tYXRjaChQUk9UT0NPTF9SRSk7XG4gICAgY29uc3QgaGFzVW5zdXBwb3J0ZWRQcm90b2NvbCA9IHByb3RvY29sICYmICFTVVBQT1JURURfUFJPVE9DT0xfUkUudGVzdCh1cmwpO1xuICAgIGNvbnN0IGlzV2luQWJzb2x1dGVQYXRoICAgICAgPSBPUy53aW4gJiYgV0lOX0FCU09MVVRFX1BBVEhfUkUudGVzdCh1cmwpO1xuXG4gICAgaWYgKGhhc1Vuc3VwcG9ydGVkUHJvdG9jb2wgJiYgIWlzV2luQWJzb2x1dGVQYXRoICYmIHVybCAhPT0gJ2Fib3V0OmJsYW5rJylcbiAgICAgICAgdGhyb3cgbmV3IEFQSUVycm9yKGNhbGxzaXRlTmFtZSwgUlVOVElNRV9FUlJPUlMudW5zdXBwb3J0ZWRVcmxQcm90b2NvbCwgdXJsLCBwcm90b2NvbFswXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlUGFnZVVybCAodXJsLCB0ZXN0RmlsZU5hbWUpIHtcbiAgICBpZiAoU1VQUE9SVEVEX1BST1RPQ09MX1JFLnRlc3QodXJsKSB8fCB1cmwgPT09ICdhYm91dDpibGFuaycpXG4gICAgICAgIHJldHVybiB1cmw7XG5cbiAgICBpZiAoaXNBYnNvbHV0ZVBhdGgodXJsKSB8fCBSRUxBVElWRV9QQVRIX1JFLnRlc3QodXJsKSlcbiAgICAgICAgcmV0dXJuIHJlc29sdmVGaWxlVXJsKHVybCwgdGVzdEZpbGVOYW1lKTtcblxuICAgIGNvbnN0IHByb3RvY29sID0gSU1QTElDSVRfUFJPVE9DT0xfUkUudGVzdCh1cmwpID8gJ2h0dHA6JyA6ICdodHRwOi8vJztcblxuICAgIHJldHVybiBwcm90b2NvbCArIHVybDtcbn1cbiJdfQ==
