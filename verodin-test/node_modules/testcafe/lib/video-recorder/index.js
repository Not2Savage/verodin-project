'use strict';

exports.__esModule = true;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _path = require('path');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _child_process = require('child_process');

var _makeDir = require('make-dir');

var _makeDir2 = _interopRequireDefault(_makeDir);

var _process = require('./process');

var _process2 = _interopRequireDefault(_process);

var _tempDirectory = require('../utils/temp-directory');

var _tempDirectory2 = _interopRequireDefault(_tempDirectory);

var _pathPattern = require('../utils/path-pattern');

var _pathPattern2 = _interopRequireDefault(_pathPattern);

var _warningMessage = require('../notifications/warning-message');

var _warningMessage2 = _interopRequireDefault(_warningMessage);

var _string = require('../utils/string');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEBUG_LOGGER = (0, _debug2.default)('testcafe:video-recorder');

const VIDEO_EXTENSION = 'mp4';

const TEMP_DIR_PREFIX = 'video';
const TEMP_VIDEO_FILE_PREFIX = 'tmp-video';
const TEMP_MERGE_FILE_PREFIX = TEMP_VIDEO_FILE_PREFIX + '-merge';

const TEMP_MERGE_CONFIG_FILE_PREFIX = 'config';
const TEMP_MERGE_CONFIG_FILE_EXTENSION = 'txt';

class VideoRecorder {
    constructor(browserJob, basePath, opts, encodingOpts, warningLog) {
        this.browserJob = browserJob;
        this.basePath = basePath;
        this.failedOnly = opts.failedOnly;
        this.singleFile = opts.singleFile;
        this.ffmpegPath = opts.ffmpegPath;
        this.customPathPattern = opts.pathPattern;
        this.timeStamp = opts.timeStamp;
        this.encodingOptions = encodingOpts;

        this.warningLog = warningLog;

        this.tempDirectory = new _tempDirectory2.default(TEMP_DIR_PREFIX);
        this.tempVideoPath = '';
        this.tempMergeConfigPath = '';

        this.firstFile = true;

        this.testRunInfo = {};

        this._assignEventHandlers(browserJob);
    }

    _createSafeListener(listener) {
        var _this = this;

        return (() => {
            var _ref = (0, _asyncToGenerator3.default)(function* (...args) {
                try {
                    return yield listener.apply(_this, args);
                } catch (error) {
                    DEBUG_LOGGER(listener && listener.name, error);

                    return void 0;
                }
            });

            return function () {
                return _ref.apply(this, arguments);
            };
        })();
    }

    _assignEventHandlers(browserJob) {
        browserJob.once('start', this._createSafeListener(this._onBrowserJobStart));
        browserJob.once('done', this._createSafeListener(this._onBrowserJobDone));
        browserJob.on('test-run-create', this._createSafeListener(this._onTestRunCreate));
        browserJob.on('test-run-ready', this._createSafeListener(this._onTestRunReady));
        browserJob.on('test-run-before-done', this._createSafeListener(this._onTestRunBeforeDone));
    }

    _addProblematicPlaceholdersWarning(placeholders) {
        const problematicPlaceholderListStr = (0, _string.getConcatenatedValuesString)(placeholders);
        const suffix = (0, _string.getPluralSuffix)(placeholders);
        const verb = (0, _string.getToBeInPastTense)(placeholders);

        this.warningLog.addWarning(_warningMessage2.default.problematicPathPatternPlaceholderForVideoRecording, problematicPlaceholderListStr, suffix, suffix, verb);
    }

    _getTargetVideoPath(testRunInfo) {
        const test = testRunInfo.test,
              index = testRunInfo.index,
              testRun = testRunInfo.testRun;


        const connection = testRun.browserConnection;

        const pathPattern = new _pathPattern2.default(this.customPathPattern, VIDEO_EXTENSION, {
            testIndex: this.singleFile ? null : index,
            quarantineAttempt: null,
            now: this.timeStamp,
            fixture: this.singleFile ? null : test.fixture.name,
            test: this.singleFile ? null : test.name,
            parsedUserAgent: connection.browserInfo.parsedUserAgent
        });

        pathPattern.on('problematic-placeholders-found', ({ placeholders }) => this._addProblematicPlaceholdersWarning(placeholders));

        return (0, _path.join)(this.basePath, pathPattern.getPath());
    }

    _generateTempNames(id) {
        const tempFileNames = {
            tempVideoPath: `${TEMP_VIDEO_FILE_PREFIX}-${id}.${VIDEO_EXTENSION}`,
            tempMergeConfigPath: `${TEMP_MERGE_CONFIG_FILE_PREFIX}-${id}.${TEMP_MERGE_CONFIG_FILE_EXTENSION}`,
            tmpMergeName: `${TEMP_MERGE_FILE_PREFIX}-${id}.${VIDEO_EXTENSION}`
        };

        for (var _iterator = (0, _entries2.default)(tempFileNames), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
            var _ref3;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref3 = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref3 = _i.value;
            }

            const _ref2 = _ref3;
            const tempFile = _ref2[0];
            const tempName = _ref2[1];

            tempFileNames[tempFile] = (0, _path.join)(this.tempDirectory.path, tempName);
        }return tempFileNames;
    }

    _concatVideo(targetVideoPath, { tempVideoPath, tempMergeConfigPath, tmpMergeName }) {
        if (this.firstFile) {
            this.firstFile = false;
            return;
        }

        _fs2.default.writeFileSync(tempMergeConfigPath, `
            file '${targetVideoPath}'
            file '${tempVideoPath}'
        `);

        (0, _child_process.spawnSync)(this.ffmpegPath, ['-y', '-f', 'concat', '-safe', '0', '-i', tempMergeConfigPath, '-c', 'copy', tmpMergeName], { stdio: 'ignore' });
        _fs2.default.copyFileSync(tmpMergeName, tempVideoPath);
    }

    _onBrowserJobStart() {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _this2.tempDirectory.init();
        })();
    }

    _onBrowserJobDone() {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _this3.tempDirectory.dispose();
        })();
    }

    _onTestRunCreate({ testRun, legacy, quarantine, test, index }) {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (legacy) return;

            const testRunInfo = { testRun, quarantine, test, index };

            const connection = testRun.browserConnection;

            const connectionCapabilities = yield testRun.browserConnection.provider.hasCustomActionForBrowser(connection.id);

            if (!connectionCapabilities || !connectionCapabilities.hasGetVideoFrameData) {
                _this4.browserJob.warningLog.addWarning(_warningMessage2.default.videoNotSupportedByBrowser, connection.browserInfo.alias);

                return;
            }

            _this4.testRunInfo[index] = testRunInfo;

            testRunInfo.tempFiles = _this4._generateTempNames(connection.id);

            testRunInfo.videoRecorder = new _process2.default(testRunInfo.tempFiles.tempVideoPath, _this4.ffmpegPath, connection, _this4.encodingOptions);

            yield testRunInfo.videoRecorder.init();
        })();
    }

    _onTestRunReady(testRunController) {
        var _this5 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const testRunInfo = _this5.testRunInfo[testRunController.index];

            if (!testRunInfo) return;

            yield testRunInfo.videoRecorder.startCapturing();
        })();
    }

    _onTestRunBeforeDone(testRunController) {
        var _this6 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const testRunInfo = _this6.testRunInfo[testRunController.index];

            if (!testRunInfo) return;

            delete _this6.testRunInfo[testRunController.index];

            yield testRunInfo.videoRecorder.finishCapturing();

            const videoPath = _this6._getTargetVideoPath(testRunInfo);

            if (_this6.failedOnly && !testRunController.testRun.errs.length) return;

            yield (0, _makeDir2.default)((0, _path.dirname)(videoPath));

            if (_this6.singleFile) _this6._concatVideo(videoPath, testRunInfo.tempFiles);

            _fs2.default.copyFileSync(testRunInfo.tempFiles.tempVideoPath, videoPath);
        })();
    }
}
exports.default = VideoRecorder;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
