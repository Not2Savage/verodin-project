'use strict';

exports.__esModule = true;
exports.generateScreenshotMark = generateScreenshotMark;
exports.readPng = readPng;
exports.writePng = writePng;
exports.copyImagePart = copyImagePart;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _pngjs = require('pngjs');

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _lodash = require('lodash');

var _promisifyEvent = require('promisify-event');

var _promisifyEvent2 = _interopRequireDefault(_promisifyEvent);

var _generate = require('nanoid/generate');

var _generate2 = _interopRequireDefault(_generate);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ALPHABET = '01';

function generateScreenshotMark() {
    // NOTE: 32-bit id
    const id = (0, _generate2.default)(ALPHABET, _constants.MARK_LENGTH);

    // NOTE: array of RGB values
    const markSeed = (0, _lodash.flatten)((0, _lodash.map)(id, bit => bit === '0' ? [0, 0, 0, 255] : [255, 255, 255, 255]));

    // NOTE: macOS browsers can't display an element, if it's CSS height is lesser than 1.
    // It happens on Retina displays, because they have more than 1 physical pixel in a CSS pixel.
    // So increase mark size by prepending transparent pixels before the actual mark.
    const imageData = (0, _lodash.times)(_constants.MARK_BYTES_PER_PIXEL * _constants.MARK_LENGTH * (_constants.MARK_HEIGHT - 1), (0, _lodash.constant)(0)).concat(markSeed);
    const imageDataBuffer = Buffer.from(imageData);
    const pngImage = new _pngjs.PNG({ width: _constants.MARK_LENGTH, height: _constants.MARK_HEIGHT });

    imageDataBuffer.copy(pngImage.data);

    const markData = 'data:image/png;base64,' + _pngjs.PNG.sync.write(pngImage).toString('base64');

    return { markSeed, markData };
}

function readPng(buffer) {
    const png = new _pngjs.PNG();

    const parsedPromise = _pinkie2.default.race([(0, _promisifyEvent2.default)(png, 'parsed'), (0, _promisifyEvent2.default)(png, 'error')]);

    png.parse(buffer);

    return parsedPromise.then(() => png);
}

function writePng(filePath, png) {
    const outStream = _fs2.default.createWriteStream(filePath);
    const pngStream = png.pack();

    const finishPromise = _pinkie2.default.race([(0, _promisifyEvent2.default)(outStream, 'finish'), (0, _promisifyEvent2.default)(outStream, 'error'), (0, _promisifyEvent2.default)(pngStream, 'error')]);

    pngStream.pipe(outStream);

    return finishPromise;
}

function copyImagePart(pngImage, { clipLeft, clipTop, clipRight, clipBottom }) {
    const width = clipRight - clipLeft;
    const height = clipBottom - clipTop;

    const dstImage = new _pngjs.PNG({ width, height });

    const stride = dstImage.width * _constants.MARK_BYTES_PER_PIXEL;

    for (let i = 0; i < height; i++) {
        const srcStartIndex = (pngImage.width * (i + clipTop) + clipLeft) * _constants.MARK_BYTES_PER_PIXEL;

        pngImage.data.copy(dstImage.data, stride * i, srcStartIndex, srcStartIndex + stride);
    }

    return dstImage;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JlZW5zaG90cy91dGlscy5qcyJdLCJuYW1lcyI6WyJnZW5lcmF0ZVNjcmVlbnNob3RNYXJrIiwicmVhZFBuZyIsIndyaXRlUG5nIiwiY29weUltYWdlUGFydCIsIkFMUEhBQkVUIiwiaWQiLCJNQVJLX0xFTkdUSCIsIm1hcmtTZWVkIiwiYml0IiwiaW1hZ2VEYXRhIiwiTUFSS19CWVRFU19QRVJfUElYRUwiLCJNQVJLX0hFSUdIVCIsImNvbmNhdCIsImltYWdlRGF0YUJ1ZmZlciIsIkJ1ZmZlciIsImZyb20iLCJwbmdJbWFnZSIsIlBORyIsIndpZHRoIiwiaGVpZ2h0IiwiY29weSIsImRhdGEiLCJtYXJrRGF0YSIsInN5bmMiLCJ3cml0ZSIsInRvU3RyaW5nIiwiYnVmZmVyIiwicG5nIiwicGFyc2VkUHJvbWlzZSIsIlByb21pc2UiLCJyYWNlIiwicGFyc2UiLCJ0aGVuIiwiZmlsZVBhdGgiLCJvdXRTdHJlYW0iLCJmcyIsImNyZWF0ZVdyaXRlU3RyZWFtIiwicG5nU3RyZWFtIiwicGFjayIsImZpbmlzaFByb21pc2UiLCJwaXBlIiwiY2xpcExlZnQiLCJjbGlwVG9wIiwiY2xpcFJpZ2h0IiwiY2xpcEJvdHRvbSIsImRzdEltYWdlIiwic3RyaWRlIiwiaSIsInNyY1N0YXJ0SW5kZXgiXSwibWFwcGluZ3MiOiI7OztRQVVnQkEsc0IsR0FBQUEsc0I7UUFxQkFDLE8sR0FBQUEsTztRQWNBQyxRLEdBQUFBLFE7UUFlQUMsYSxHQUFBQSxhOztBQTVEaEI7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBLE1BQU1DLFdBQVcsSUFBakI7O0FBRU8sU0FBU0osc0JBQVQsR0FBbUM7QUFDdEM7QUFDQSxVQUFNSyxLQUFLLHdCQUFXRCxRQUFYLEVBQXFCRSxzQkFBckIsQ0FBWDs7QUFFQTtBQUNBLFVBQU1DLFdBQVcscUJBQVEsaUJBQUlGLEVBQUosRUFBUUcsT0FBT0EsUUFBUSxHQUFSLEdBQWMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxHQUFWLENBQWQsR0FBK0IsQ0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLEdBQVgsRUFBZ0IsR0FBaEIsQ0FBOUMsQ0FBUixDQUFqQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFNQyxZQUFrQixtQkFBTUMsa0NBQXVCSixzQkFBdkIsSUFBc0NLLHlCQUFjLENBQXBELENBQU4sRUFBOEQsc0JBQVMsQ0FBVCxDQUE5RCxFQUEyRUMsTUFBM0UsQ0FBa0ZMLFFBQWxGLENBQXhCO0FBQ0EsVUFBTU0sa0JBQWtCQyxPQUFPQyxJQUFQLENBQVlOLFNBQVosQ0FBeEI7QUFDQSxVQUFNTyxXQUFrQixJQUFJQyxVQUFKLENBQVEsRUFBRUMsT0FBT1osc0JBQVQsRUFBc0JhLFFBQVFSLHNCQUE5QixFQUFSLENBQXhCOztBQUVBRSxvQkFBZ0JPLElBQWhCLENBQXFCSixTQUFTSyxJQUE5Qjs7QUFFQSxVQUFNQyxXQUFXLDJCQUEyQkwsV0FBSU0sSUFBSixDQUFTQyxLQUFULENBQWVSLFFBQWYsRUFBeUJTLFFBQXpCLENBQWtDLFFBQWxDLENBQTVDOztBQUVBLFdBQU8sRUFBRWxCLFFBQUYsRUFBWWUsUUFBWixFQUFQO0FBQ0g7O0FBRU0sU0FBU3JCLE9BQVQsQ0FBa0J5QixNQUFsQixFQUEwQjtBQUM3QixVQUFNQyxNQUFNLElBQUlWLFVBQUosRUFBWjs7QUFFQSxVQUFNVyxnQkFBZ0JDLGlCQUFRQyxJQUFSLENBQWEsQ0FDL0IsOEJBQWVILEdBQWYsRUFBb0IsUUFBcEIsQ0FEK0IsRUFFL0IsOEJBQWVBLEdBQWYsRUFBb0IsT0FBcEIsQ0FGK0IsQ0FBYixDQUF0Qjs7QUFLQUEsUUFBSUksS0FBSixDQUFVTCxNQUFWOztBQUVBLFdBQU9FLGNBQ0ZJLElBREUsQ0FDRyxNQUFNTCxHQURULENBQVA7QUFFSDs7QUFFTSxTQUFTekIsUUFBVCxDQUFtQitCLFFBQW5CLEVBQTZCTixHQUE3QixFQUFrQztBQUNyQyxVQUFNTyxZQUFZQyxhQUFHQyxpQkFBSCxDQUFxQkgsUUFBckIsQ0FBbEI7QUFDQSxVQUFNSSxZQUFZVixJQUFJVyxJQUFKLEVBQWxCOztBQUVBLFVBQU1DLGdCQUFnQlYsaUJBQVFDLElBQVIsQ0FBYSxDQUMvQiw4QkFBZUksU0FBZixFQUEwQixRQUExQixDQUQrQixFQUUvQiw4QkFBZUEsU0FBZixFQUEwQixPQUExQixDQUYrQixFQUcvQiw4QkFBZUcsU0FBZixFQUEwQixPQUExQixDQUgrQixDQUFiLENBQXRCOztBQU1BQSxjQUFVRyxJQUFWLENBQWVOLFNBQWY7O0FBRUEsV0FBT0ssYUFBUDtBQUNIOztBQUVNLFNBQVNwQyxhQUFULENBQXdCYSxRQUF4QixFQUFrQyxFQUFFeUIsUUFBRixFQUFZQyxPQUFaLEVBQXFCQyxTQUFyQixFQUFnQ0MsVUFBaEMsRUFBbEMsRUFBZ0Y7QUFDbkYsVUFBTTFCLFFBQVN5QixZQUFZRixRQUEzQjtBQUNBLFVBQU10QixTQUFTeUIsYUFBYUYsT0FBNUI7O0FBRUEsVUFBTUcsV0FBVyxJQUFJNUIsVUFBSixDQUFRLEVBQUVDLEtBQUYsRUFBU0MsTUFBVCxFQUFSLENBQWpCOztBQUVBLFVBQU0yQixTQUFTRCxTQUFTM0IsS0FBVCxHQUFpQlIsK0JBQWhDOztBQUVBLFNBQUssSUFBSXFDLElBQUksQ0FBYixFQUFnQkEsSUFBSTVCLE1BQXBCLEVBQTRCNEIsR0FBNUIsRUFBaUM7QUFDN0IsY0FBTUMsZ0JBQWdCLENBQUNoQyxTQUFTRSxLQUFULElBQWtCNkIsSUFBSUwsT0FBdEIsSUFBaUNELFFBQWxDLElBQThDL0IsK0JBQXBFOztBQUVBTSxpQkFBU0ssSUFBVCxDQUFjRCxJQUFkLENBQW1CeUIsU0FBU3hCLElBQTVCLEVBQWtDeUIsU0FBU0MsQ0FBM0MsRUFBOENDLGFBQTlDLEVBQTZEQSxnQkFBZ0JGLE1BQTdFO0FBQ0g7O0FBRUQsV0FBT0QsUUFBUDtBQUNIIiwiZmlsZSI6InNjcmVlbnNob3RzL3V0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCB7IFBORyB9IGZyb20gJ3BuZ2pzJztcbmltcG9ydCBQcm9taXNlIGZyb20gJ3BpbmtpZSc7XG5pbXBvcnQgeyBtYXAsIGZsYXR0ZW4sIHRpbWVzLCBjb25zdGFudCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgcHJvbWlzaWZ5RXZlbnQgZnJvbSAncHJvbWlzaWZ5LWV2ZW50JztcbmltcG9ydCBnZW5lcmF0ZUlkIGZyb20gJ25hbm9pZC9nZW5lcmF0ZSc7XG5pbXBvcnQgeyBNQVJLX0xFTkdUSCwgTUFSS19IRUlHSFQsIE1BUktfQllURVNfUEVSX1BJWEVMIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5jb25zdCBBTFBIQUJFVCA9ICcwMSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVNjcmVlbnNob3RNYXJrICgpIHtcbiAgICAvLyBOT1RFOiAzMi1iaXQgaWRcbiAgICBjb25zdCBpZCA9IGdlbmVyYXRlSWQoQUxQSEFCRVQsIE1BUktfTEVOR1RIKTtcblxuICAgIC8vIE5PVEU6IGFycmF5IG9mIFJHQiB2YWx1ZXNcbiAgICBjb25zdCBtYXJrU2VlZCA9IGZsYXR0ZW4obWFwKGlkLCBiaXQgPT4gYml0ID09PSAnMCcgPyBbMCwgMCwgMCwgMjU1XSA6IFsyNTUsIDI1NSwgMjU1LCAyNTVdKSk7XG5cbiAgICAvLyBOT1RFOiBtYWNPUyBicm93c2VycyBjYW4ndCBkaXNwbGF5IGFuIGVsZW1lbnQsIGlmIGl0J3MgQ1NTIGhlaWdodCBpcyBsZXNzZXIgdGhhbiAxLlxuICAgIC8vIEl0IGhhcHBlbnMgb24gUmV0aW5hIGRpc3BsYXlzLCBiZWNhdXNlIHRoZXkgaGF2ZSBtb3JlIHRoYW4gMSBwaHlzaWNhbCBwaXhlbCBpbiBhIENTUyBwaXhlbC5cbiAgICAvLyBTbyBpbmNyZWFzZSBtYXJrIHNpemUgYnkgcHJlcGVuZGluZyB0cmFuc3BhcmVudCBwaXhlbHMgYmVmb3JlIHRoZSBhY3R1YWwgbWFyay5cbiAgICBjb25zdCBpbWFnZURhdGEgICAgICAgPSB0aW1lcyhNQVJLX0JZVEVTX1BFUl9QSVhFTCAqIE1BUktfTEVOR1RIICogKE1BUktfSEVJR0hUIC0gMSksIGNvbnN0YW50KDApKS5jb25jYXQobWFya1NlZWQpO1xuICAgIGNvbnN0IGltYWdlRGF0YUJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGltYWdlRGF0YSk7XG4gICAgY29uc3QgcG5nSW1hZ2UgICAgICAgID0gbmV3IFBORyh7IHdpZHRoOiBNQVJLX0xFTkdUSCwgaGVpZ2h0OiBNQVJLX0hFSUdIVCB9KTtcblxuICAgIGltYWdlRGF0YUJ1ZmZlci5jb3B5KHBuZ0ltYWdlLmRhdGEpO1xuXG4gICAgY29uc3QgbWFya0RhdGEgPSAnZGF0YTppbWFnZS9wbmc7YmFzZTY0LCcgKyBQTkcuc3luYy53cml0ZShwbmdJbWFnZSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuXG4gICAgcmV0dXJuIHsgbWFya1NlZWQsIG1hcmtEYXRhIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkUG5nIChidWZmZXIpIHtcbiAgICBjb25zdCBwbmcgPSBuZXcgUE5HKCk7XG5cbiAgICBjb25zdCBwYXJzZWRQcm9taXNlID0gUHJvbWlzZS5yYWNlKFtcbiAgICAgICAgcHJvbWlzaWZ5RXZlbnQocG5nLCAncGFyc2VkJyksXG4gICAgICAgIHByb21pc2lmeUV2ZW50KHBuZywgJ2Vycm9yJylcbiAgICBdKTtcblxuICAgIHBuZy5wYXJzZShidWZmZXIpO1xuXG4gICAgcmV0dXJuIHBhcnNlZFByb21pc2VcbiAgICAgICAgLnRoZW4oKCkgPT4gcG5nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlUG5nIChmaWxlUGF0aCwgcG5nKSB7XG4gICAgY29uc3Qgb3V0U3RyZWFtID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0oZmlsZVBhdGgpO1xuICAgIGNvbnN0IHBuZ1N0cmVhbSA9IHBuZy5wYWNrKCk7XG5cbiAgICBjb25zdCBmaW5pc2hQcm9taXNlID0gUHJvbWlzZS5yYWNlKFtcbiAgICAgICAgcHJvbWlzaWZ5RXZlbnQob3V0U3RyZWFtLCAnZmluaXNoJyksXG4gICAgICAgIHByb21pc2lmeUV2ZW50KG91dFN0cmVhbSwgJ2Vycm9yJyksXG4gICAgICAgIHByb21pc2lmeUV2ZW50KHBuZ1N0cmVhbSwgJ2Vycm9yJylcbiAgICBdKTtcblxuICAgIHBuZ1N0cmVhbS5waXBlKG91dFN0cmVhbSk7XG5cbiAgICByZXR1cm4gZmluaXNoUHJvbWlzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHlJbWFnZVBhcnQgKHBuZ0ltYWdlLCB7IGNsaXBMZWZ0LCBjbGlwVG9wLCBjbGlwUmlnaHQsIGNsaXBCb3R0b20gfSkge1xuICAgIGNvbnN0IHdpZHRoICA9IGNsaXBSaWdodCAtIGNsaXBMZWZ0O1xuICAgIGNvbnN0IGhlaWdodCA9IGNsaXBCb3R0b20gLSBjbGlwVG9wO1xuXG4gICAgY29uc3QgZHN0SW1hZ2UgPSBuZXcgUE5HKHsgd2lkdGgsIGhlaWdodCB9KTtcblxuICAgIGNvbnN0IHN0cmlkZSA9IGRzdEltYWdlLndpZHRoICogTUFSS19CWVRFU19QRVJfUElYRUw7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhlaWdodDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHNyY1N0YXJ0SW5kZXggPSAocG5nSW1hZ2Uud2lkdGggKiAoaSArIGNsaXBUb3ApICsgY2xpcExlZnQpICogTUFSS19CWVRFU19QRVJfUElYRUw7XG5cbiAgICAgICAgcG5nSW1hZ2UuZGF0YS5jb3B5KGRzdEltYWdlLmRhdGEsIHN0cmlkZSAqIGksIHNyY1N0YXJ0SW5kZXgsIHNyY1N0YXJ0SW5kZXggKyBzdHJpZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBkc3RJbWFnZTtcbn1cbiJdfQ==
