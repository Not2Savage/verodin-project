'use strict';

exports.__esModule = true;
exports.default = {
                       screenshotsPathNotSpecified: 'Was unable to take screenshots because the screenshot directory is not specified. To specify it, use the "-s" or "--screenshots" command line option or the "screenshots" method of the test runner in case you are using API.',
                       screenshotError: 'Was unable to take a screenshot due to an error.\n\n{errMessage}',
                       screenshotMarkNotFound: 'Unable to locate the page area in the browser window screenshot at {screenshotPath}, because the page area mark with ID {markId} is not found in the screenshot.',
                       screenshotRewritingError: 'The file at "{screenshotPath}" already exists. It has just been rewritten with a recent screenshot. This situation can possibly cause issues. To avoid them, make sure that each screenshot has a unique path. If a test runs in multiple browsers, consider including the user agent in the screenshot path or generate a unique identifier in another way.',
                       browserManipulationsOnRemoteBrowser: 'The screenshot and window resize functionalities are not supported in a remote browser. They can function only if the browser is running on the same machine and in the same environment as the TestCafe server.',
                       screenshotNotSupportedByBrowserProvider: 'The screenshot functionality is not supported by the "{providerName}" browser provider.',
                       videoNotSupportedByBrowser: 'Video recording is not supported by the "{browserAlias}" browser.',
                       resizeNotSupportedByBrowserProvider: 'The window resize functionality is not supported by the "{providerName}" browser provider.',
                       maximizeNotSupportedByBrowserProvider: 'The window maximization functionality is not supported by the "{providerName}" browser provider.',
                       resizeError: 'Was unable to resize the window due to an error.\n\n{errMessage}',
                       maximizeError: 'Was unable to maximize the window due to an error.\n\n{errMessage}',
                       requestMockCORSValidationFailed: '{RequestHook}: CORS validation failed for a request specified as {requestFilterRule}',
                       debugInHeadlessError: 'You cannot debug in headless mode.',
                       cannotReadConfigFile: 'An error has occurred while reading the configuration file.',
                       cannotParseConfigFile: "Failed to parse the '.testcaferc.json' file.\n\nThis file is not a well-formed JSON file.",
                       configOptionsWereOverriden: 'The {optionsString} option{suffix} from the configuration file will be ignored.',

                       cannotFindSSLCertFile: 'Unable to find the "{path}" file, specified by the "{option}" ssl option. Error details:\n' + '\n' + '{err}',

                       cannotFindConfigurationFile: 'Unable to find the "{path}" configuration file. Error details:\n' + '\n' + '{err}',

                       problematicPathPatternPlaceholderForVideoRecording: 'The {placeholderList} path pattern placeholder{suffix} cannot be applied to the recorded video.\n' + '\n' + 'The placeholder{suffix} {verb} replaced with an empty string.'
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub3RpZmljYXRpb25zL3dhcm5pbmctbWVzc2FnZS5qcyJdLCJuYW1lcyI6WyJzY3JlZW5zaG90c1BhdGhOb3RTcGVjaWZpZWQiLCJzY3JlZW5zaG90RXJyb3IiLCJzY3JlZW5zaG90TWFya05vdEZvdW5kIiwic2NyZWVuc2hvdFJld3JpdGluZ0Vycm9yIiwiYnJvd3Nlck1hbmlwdWxhdGlvbnNPblJlbW90ZUJyb3dzZXIiLCJzY3JlZW5zaG90Tm90U3VwcG9ydGVkQnlCcm93c2VyUHJvdmlkZXIiLCJ2aWRlb05vdFN1cHBvcnRlZEJ5QnJvd3NlciIsInJlc2l6ZU5vdFN1cHBvcnRlZEJ5QnJvd3NlclByb3ZpZGVyIiwibWF4aW1pemVOb3RTdXBwb3J0ZWRCeUJyb3dzZXJQcm92aWRlciIsInJlc2l6ZUVycm9yIiwibWF4aW1pemVFcnJvciIsInJlcXVlc3RNb2NrQ09SU1ZhbGlkYXRpb25GYWlsZWQiLCJkZWJ1Z0luSGVhZGxlc3NFcnJvciIsImNhbm5vdFJlYWRDb25maWdGaWxlIiwiY2Fubm90UGFyc2VDb25maWdGaWxlIiwiY29uZmlnT3B0aW9uc1dlcmVPdmVycmlkZW4iLCJjYW5ub3RGaW5kU1NMQ2VydEZpbGUiLCJjYW5ub3RGaW5kQ29uZmlndXJhdGlvbkZpbGUiLCJwcm9ibGVtYXRpY1BhdGhQYXR0ZXJuUGxhY2Vob2xkZXJGb3JWaWRlb1JlY29yZGluZyJdLCJtYXBwaW5ncyI6Ijs7O2tCQUFlO0FBQ1hBLG9EQUF5QyxnT0FEOUI7QUFFWEMsd0NBQXlDLGtFQUY5QjtBQUdYQywrQ0FBeUMsa0tBSDlCO0FBSVhDLGlEQUF5Qyw4VkFKOUI7QUFLWEMsNERBQXlDLGtOQUw5QjtBQU1YQyxnRUFBeUMseUZBTjlCO0FBT1hDLG1EQUF5QyxtRUFQOUI7QUFRWEMsNERBQXlDLDRGQVI5QjtBQVNYQyw4REFBeUMsa0dBVDlCO0FBVVhDLG9DQUF5QyxrRUFWOUI7QUFXWEMsc0NBQXlDLG9FQVg5QjtBQVlYQyx3REFBeUMsc0ZBWjlCO0FBYVhDLDZDQUF5QyxvQ0FiOUI7QUFjWEMsNkNBQXlDLDZEQWQ5QjtBQWVYQyw4Q0FBeUMsMkZBZjlCO0FBZ0JYQyxtREFBeUMsaUZBaEI5Qjs7QUFrQlhDLDhDQUF1QiwrRkFDQSxJQURBLEdBRUEsT0FwQlo7O0FBc0JYQyxvREFBNkIscUVBQ0EsSUFEQSxHQUVBLE9BeEJsQjs7QUEwQlhDLDJFQUFvRCxzR0FDQSxJQURBLEdBRUE7QUE1QnpDLEMiLCJmaWxlIjoibm90aWZpY2F0aW9ucy93YXJuaW5nLW1lc3NhZ2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgc2NyZWVuc2hvdHNQYXRoTm90U3BlY2lmaWVkOiAgICAgICAgICAgICAnV2FzIHVuYWJsZSB0byB0YWtlIHNjcmVlbnNob3RzIGJlY2F1c2UgdGhlIHNjcmVlbnNob3QgZGlyZWN0b3J5IGlzIG5vdCBzcGVjaWZpZWQuIFRvIHNwZWNpZnkgaXQsIHVzZSB0aGUgXCItc1wiIG9yIFwiLS1zY3JlZW5zaG90c1wiIGNvbW1hbmQgbGluZSBvcHRpb24gb3IgdGhlIFwic2NyZWVuc2hvdHNcIiBtZXRob2Qgb2YgdGhlIHRlc3QgcnVubmVyIGluIGNhc2UgeW91IGFyZSB1c2luZyBBUEkuJyxcbiAgICBzY3JlZW5zaG90RXJyb3I6ICAgICAgICAgICAgICAgICAgICAgICAgICdXYXMgdW5hYmxlIHRvIHRha2UgYSBzY3JlZW5zaG90IGR1ZSB0byBhbiBlcnJvci5cXG5cXG57ZXJyTWVzc2FnZX0nLFxuICAgIHNjcmVlbnNob3RNYXJrTm90Rm91bmQ6ICAgICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBsb2NhdGUgdGhlIHBhZ2UgYXJlYSBpbiB0aGUgYnJvd3NlciB3aW5kb3cgc2NyZWVuc2hvdCBhdCB7c2NyZWVuc2hvdFBhdGh9LCBiZWNhdXNlIHRoZSBwYWdlIGFyZWEgbWFyayB3aXRoIElEIHttYXJrSWR9IGlzIG5vdCBmb3VuZCBpbiB0aGUgc2NyZWVuc2hvdC4nLFxuICAgIHNjcmVlbnNob3RSZXdyaXRpbmdFcnJvcjogICAgICAgICAgICAgICAgJ1RoZSBmaWxlIGF0IFwie3NjcmVlbnNob3RQYXRofVwiIGFscmVhZHkgZXhpc3RzLiBJdCBoYXMganVzdCBiZWVuIHJld3JpdHRlbiB3aXRoIGEgcmVjZW50IHNjcmVlbnNob3QuIFRoaXMgc2l0dWF0aW9uIGNhbiBwb3NzaWJseSBjYXVzZSBpc3N1ZXMuIFRvIGF2b2lkIHRoZW0sIG1ha2Ugc3VyZSB0aGF0IGVhY2ggc2NyZWVuc2hvdCBoYXMgYSB1bmlxdWUgcGF0aC4gSWYgYSB0ZXN0IHJ1bnMgaW4gbXVsdGlwbGUgYnJvd3NlcnMsIGNvbnNpZGVyIGluY2x1ZGluZyB0aGUgdXNlciBhZ2VudCBpbiB0aGUgc2NyZWVuc2hvdCBwYXRoIG9yIGdlbmVyYXRlIGEgdW5pcXVlIGlkZW50aWZpZXIgaW4gYW5vdGhlciB3YXkuJyxcbiAgICBicm93c2VyTWFuaXB1bGF0aW9uc09uUmVtb3RlQnJvd3NlcjogICAgICdUaGUgc2NyZWVuc2hvdCBhbmQgd2luZG93IHJlc2l6ZSBmdW5jdGlvbmFsaXRpZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gYSByZW1vdGUgYnJvd3Nlci4gVGhleSBjYW4gZnVuY3Rpb24gb25seSBpZiB0aGUgYnJvd3NlciBpcyBydW5uaW5nIG9uIHRoZSBzYW1lIG1hY2hpbmUgYW5kIGluIHRoZSBzYW1lIGVudmlyb25tZW50IGFzIHRoZSBUZXN0Q2FmZSBzZXJ2ZXIuJyxcbiAgICBzY3JlZW5zaG90Tm90U3VwcG9ydGVkQnlCcm93c2VyUHJvdmlkZXI6ICdUaGUgc2NyZWVuc2hvdCBmdW5jdGlvbmFsaXR5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIFwie3Byb3ZpZGVyTmFtZX1cIiBicm93c2VyIHByb3ZpZGVyLicsXG4gICAgdmlkZW9Ob3RTdXBwb3J0ZWRCeUJyb3dzZXI6ICAgICAgICAgICAgICAnVmlkZW8gcmVjb3JkaW5nIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIFwie2Jyb3dzZXJBbGlhc31cIiBicm93c2VyLicsXG4gICAgcmVzaXplTm90U3VwcG9ydGVkQnlCcm93c2VyUHJvdmlkZXI6ICAgICAnVGhlIHdpbmRvdyByZXNpemUgZnVuY3Rpb25hbGl0eSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBcIntwcm92aWRlck5hbWV9XCIgYnJvd3NlciBwcm92aWRlci4nLFxuICAgIG1heGltaXplTm90U3VwcG9ydGVkQnlCcm93c2VyUHJvdmlkZXI6ICAgJ1RoZSB3aW5kb3cgbWF4aW1pemF0aW9uIGZ1bmN0aW9uYWxpdHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgXCJ7cHJvdmlkZXJOYW1lfVwiIGJyb3dzZXIgcHJvdmlkZXIuJyxcbiAgICByZXNpemVFcnJvcjogICAgICAgICAgICAgICAgICAgICAgICAgICAgICdXYXMgdW5hYmxlIHRvIHJlc2l6ZSB0aGUgd2luZG93IGR1ZSB0byBhbiBlcnJvci5cXG5cXG57ZXJyTWVzc2FnZX0nLFxuICAgIG1heGltaXplRXJyb3I6ICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1dhcyB1bmFibGUgdG8gbWF4aW1pemUgdGhlIHdpbmRvdyBkdWUgdG8gYW4gZXJyb3IuXFxuXFxue2Vyck1lc3NhZ2V9JyxcbiAgICByZXF1ZXN0TW9ja0NPUlNWYWxpZGF0aW9uRmFpbGVkOiAgICAgICAgICd7UmVxdWVzdEhvb2t9OiBDT1JTIHZhbGlkYXRpb24gZmFpbGVkIGZvciBhIHJlcXVlc3Qgc3BlY2lmaWVkIGFzIHtyZXF1ZXN0RmlsdGVyUnVsZX0nLFxuICAgIGRlYnVnSW5IZWFkbGVzc0Vycm9yOiAgICAgICAgICAgICAgICAgICAgJ1lvdSBjYW5ub3QgZGVidWcgaW4gaGVhZGxlc3MgbW9kZS4nLFxuICAgIGNhbm5vdFJlYWRDb25maWdGaWxlOiAgICAgICAgICAgICAgICAgICAgJ0FuIGVycm9yIGhhcyBvY2N1cnJlZCB3aGlsZSByZWFkaW5nIHRoZSBjb25maWd1cmF0aW9uIGZpbGUuJyxcbiAgICBjYW5ub3RQYXJzZUNvbmZpZ0ZpbGU6ICAgICAgICAgICAgICAgICAgIFwiRmFpbGVkIHRvIHBhcnNlIHRoZSAnLnRlc3RjYWZlcmMuanNvbicgZmlsZS5cXG5cXG5UaGlzIGZpbGUgaXMgbm90IGEgd2VsbC1mb3JtZWQgSlNPTiBmaWxlLlwiLFxuICAgIGNvbmZpZ09wdGlvbnNXZXJlT3ZlcnJpZGVuOiAgICAgICAgICAgICAgJ1RoZSB7b3B0aW9uc1N0cmluZ30gb3B0aW9ue3N1ZmZpeH0gZnJvbSB0aGUgY29uZmlndXJhdGlvbiBmaWxlIHdpbGwgYmUgaWdub3JlZC4nLFxuXG4gICAgY2Fubm90RmluZFNTTENlcnRGaWxlOiAnVW5hYmxlIHRvIGZpbmQgdGhlIFwie3BhdGh9XCIgZmlsZSwgc3BlY2lmaWVkIGJ5IHRoZSBcIntvcHRpb259XCIgc3NsIG9wdGlvbi4gRXJyb3IgZGV0YWlsczpcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICdcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICd7ZXJyfScsXG5cbiAgICBjYW5ub3RGaW5kQ29uZmlndXJhdGlvbkZpbGU6ICdVbmFibGUgdG8gZmluZCB0aGUgXCJ7cGF0aH1cIiBjb25maWd1cmF0aW9uIGZpbGUuIEVycm9yIGRldGFpbHM6XFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAne2Vycn0nLFxuXG4gICAgcHJvYmxlbWF0aWNQYXRoUGF0dGVyblBsYWNlaG9sZGVyRm9yVmlkZW9SZWNvcmRpbmc6ICdUaGUge3BsYWNlaG9sZGVyTGlzdH0gcGF0aCBwYXR0ZXJuIHBsYWNlaG9sZGVye3N1ZmZpeH0gY2Fubm90IGJlIGFwcGxpZWQgdG8gdGhlIHJlY29yZGVkIHZpZGVvLlxcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdUaGUgcGxhY2Vob2xkZXJ7c3VmZml4fSB7dmVyYn0gcmVwbGFjZWQgd2l0aCBhbiBlbXB0eSBzdHJpbmcuJ1xufTtcblxuIl19
