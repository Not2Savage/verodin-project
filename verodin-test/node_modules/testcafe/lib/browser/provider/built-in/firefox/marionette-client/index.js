'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _net = require('net');

var _promisifyEvent = require('promisify-event');

var _promisifyEvent2 = _interopRequireDefault(_promisifyEvent);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _promisifiedFunctions = require('../../../../../utils/promisified-functions');

var _delay = require('../../../../../utils/delay');

var _delay2 = _interopRequireDefault(_delay);

var _clientFunctions = require('../../../utils/client-functions');

var _commands = require('./commands');

var _commands2 = _interopRequireDefault(_commands);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const CONNECTION_TIMEOUT = 30000;
const CONNECTION_RETRY_DELAY = 300;
const MAX_RESIZE_RETRY_COUNT = 2;
const HEADER_SEPARATOR = ':';

module.exports = class MarionetteClient {
    constructor(port = 2828, host = '127.0.0.1') {
        this.currentPacketNumber = 1;
        this.events = new _events2.default();
        this.port = port;
        this.host = host;
        this.socket = new _net.Socket();
        this.buffer = Buffer.alloc(0);
        this.getPacketPromise = _pinkie2.default.resolve();
        this.sendPacketPromise = _pinkie2.default.resolve();

        this.protocolInfo = {
            applicationType: '',
            marionetteProtocol: ''
        };

        this.sessionInfo = null;
    }

    _attemptToConnect(port, host) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this.socket.connect(port, host);

            const connectionPromise = _pinkie2.default.race([(0, _promisifyEvent2.default)(_this.socket, 'connect'), (0, _promisifyEvent2.default)(_this.socket, 'error')]);

            return yield connectionPromise.then(function () {
                return true;
            }).catch(function () {
                _this.socket.removeAllListeners('connect');
                return (0, _delay2.default)(CONNECTION_RETRY_DELAY);
            });
        })();
    }

    _connectSocket(port, host) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const connectionStartTime = Date.now();

            let connected = yield _this2._attemptToConnect(port, host);

            while (!connected && Date.now() - connectionStartTime < CONNECTION_TIMEOUT) connected = yield _this2._attemptToConnect(port, host);

            if (!connected) throw new Error('Unable to connect');

            _this2.socket.on('data', function (data) {
                return _this2._handleNewData(data);
            });
        })();
    }

    _writeSocket(message) {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (!_this3.socket.write(message)) yield (0, _promisifyEvent2.default)(_this3.socket, 'drain');
        })();
    }

    _handleNewData(data) {
        if (!data) return;

        this.buffer = Buffer.concat([this.buffer, data]);

        this.events.emit('new-data');
    }

    _getPacket() {
        var _this4 = this;

        this.getPacketPromise = this.getPacketPromise.then((0, _asyncToGenerator3.default)(function* () {
            let headerEndIndex = _this4.buffer.indexOf(HEADER_SEPARATOR);

            while (headerEndIndex < 0) {
                yield (0, _promisifyEvent2.default)(_this4.events, 'new-data');

                headerEndIndex = _this4.buffer.indexOf(HEADER_SEPARATOR);
            }

            const packet = {
                length: NaN,
                body: null
            };

            packet.length = parseInt(_this4.buffer.toString('utf8', 0, headerEndIndex), 10) || 0;

            const bodyStartIndex = headerEndIndex + HEADER_SEPARATOR.length;
            const bodyEndIndex = bodyStartIndex + packet.length;

            if (packet.length) {
                while (_this4.buffer.length < bodyEndIndex) yield (0, _promisifyEvent2.default)(_this4.events, 'new-data');

                packet.body = JSON.parse(_this4.buffer.toString('utf8', bodyStartIndex, bodyEndIndex));
            }

            _this4.buffer = _this4.buffer.slice(bodyEndIndex);

            return packet;
        }));

        return this.getPacketPromise;
    }

    _sendPacket(payload) {
        var _this5 = this;

        this.sendPacketPromise = this.sendPacketPromise.then((0, _asyncToGenerator3.default)(function* () {
            const body = [0, _this5.currentPacketNumber++, payload.command, payload.parameters];
            const serialized = (0, _stringify2.default)(body);
            const message = Buffer.byteLength(serialized, 'utf8') + HEADER_SEPARATOR + serialized;

            _this5._writeSocket(message);
        }));

        return this.sendPacketPromise;
    }

    _throwMarionetteError(error) {
        throw new Error(`${error.error}${error.message ? ': ' + error.message : ''}`);
    }

    _getResponse(packet) {
        var _this6 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const packetNumber = _this6.currentPacketNumber;

            yield _this6._sendPacket(packet);

            let responsePacket = yield _this6._getPacket();

            while (!responsePacket.body || responsePacket.body[1] !== packetNumber) responsePacket = yield _this6._getPacket();

            if (responsePacket.body[2]) _this6._throwMarionetteError(responsePacket.body[2]);

            return responsePacket.body[3];
        })();
    }

    _getScreenshotData() {
        var _this7 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            return yield _this7._getResponse({ command: _commands2.default.takeScreenshot });
        })();
    }

    connect() {
        var _this8 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _this8._connectSocket(_this8.port, _this8.host);

            const infoPacket = yield _this8._getPacket();

            _this8.protocolInfo = {
                applicationType: infoPacket.body.applicationType,
                marionetteProtocol: infoPacket.body.marionetteProtocol
            };

            _this8.sessionInfo = yield _this8._getResponse({ command: _commands2.default.newSession });
        })();
    }

    dispose() {
        this.socket.end();
        this.buffer = null;
    }

    executeScript(code) {
        var _this9 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            return yield _this9._getResponse({
                command: _commands2.default.executeScript,
                parameters: { script: `return (${code})()` }
            });
        })();
    }

    takeScreenshot(path) {
        var _this10 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const screenshotData = yield _this10._getScreenshotData();

            yield (0, _promisifiedFunctions.writeFile)(path, screenshotData.value, { encoding: 'base64' });
        })();
    }

    getVideoFrameData() {
        var _this11 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const frameData = yield _this11._getScreenshotData();

            return Buffer.from(frameData.value, 'base64');
        })();
    }

    setWindowSize(width, height) {
        var _this12 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var _ref3 = yield _this12.executeScript(_clientFunctions.GET_WINDOW_DIMENSIONS_INFO_SCRIPT);

            let pageRect = _ref3.value;

            let attemptCounter = 0;

            while (attemptCounter++ < MAX_RESIZE_RETRY_COUNT && (pageRect.width !== width || pageRect.height !== height)) {
                const currentRect = yield _this12._getResponse({ command: _commands2.default.getWindowRect });

                yield _this12._getResponse({
                    command: _commands2.default.setWindowRect,

                    parameters: {
                        x: currentRect.x,
                        y: currentRect.y,
                        width: width + (currentRect.width - pageRect.width),
                        height: height + (currentRect.height - pageRect.height)
                    }
                });

                var _ref4 = yield _this12.executeScript(_clientFunctions.GET_WINDOW_DIMENSIONS_INFO_SCRIPT);

                pageRect = _ref4.value;
            }
        })();
    }

    quit() {
        var _this13 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _this13._getResponse({ command: _commands2.default.quit });
        })();
    }
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
