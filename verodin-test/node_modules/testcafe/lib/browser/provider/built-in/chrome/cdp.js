'use strict';

exports.__esModule = true;
exports.resizeWindow = exports.updateMobileViewportSize = exports.closeTab = exports.createClient = exports.getPageViewport = exports.getScreenshotData = undefined;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let getActiveTab = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (cdpPort, browserId) {
        const tabs = yield _chromeRemoteInterface2.default.listTabs({ port: cdpPort });
        const tab = tabs.filter(function (t) {
            return t.type === 'page' && t.url.indexOf(browserId) > -1;
        })[0];

        return tab;
    });

    return function getActiveTab(_x, _x2) {
        return _ref.apply(this, arguments);
    };
})();

let setEmulationBounds = (() => {
    var _ref2 = (0, _asyncToGenerator3.default)(function* ({ client, config, viewportSize, emulatedDevicePixelRatio }) {
        yield client.Emulation.setDeviceMetricsOverride({
            width: viewportSize.width,
            height: viewportSize.height,
            deviceScaleFactor: emulatedDevicePixelRatio,
            mobile: config.mobile,
            fitWindow: false
        });

        yield client.Emulation.setVisibleSize({ width: viewportSize.width, height: viewportSize.height });
    });

    return function setEmulationBounds(_x3) {
        return _ref2.apply(this, arguments);
    };
})();

let setEmulation = (() => {
    var _ref3 = (0, _asyncToGenerator3.default)(function* (runtimeInfo) {
        const client = runtimeInfo.client,
              config = runtimeInfo.config;


        if (config.userAgent !== void 0) yield client.Network.setUserAgentOverride({ userAgent: config.userAgent });

        if (config.touch !== void 0) {
            const touchConfig = {
                enabled: config.touch,
                configuration: config.mobile ? 'mobile' : 'desktop',
                maxTouchPoints: 1
            };

            if (client.Emulation.setEmitTouchEventsForMouse) yield client.Emulation.setEmitTouchEventsForMouse(touchConfig);

            if (client.Emulation.setTouchEmulationEnabled) yield client.Emulation.setTouchEmulationEnabled(touchConfig);
        }

        yield resizeWindow({ width: config.width, height: config.height }, runtimeInfo);
    });

    return function setEmulation(_x4) {
        return _ref3.apply(this, arguments);
    };
})();

let getScreenshotData = exports.getScreenshotData = (() => {
    var _ref4 = (0, _asyncToGenerator3.default)(function* ({ client }) {
        const screenshotData = yield client.Page.captureScreenshot();

        return Buffer.from(screenshotData.data, 'base64');
    });

    return function getScreenshotData(_x5) {
        return _ref4.apply(this, arguments);
    };
})();

let getPageViewport = exports.getPageViewport = (() => {
    var _ref5 = (0, _asyncToGenerator3.default)(function* ({ client }) {
        var _ref6 = yield client.Page.getLayoutMetrics();

        const visualViewport = _ref6.visualViewport;


        return visualViewport;
    });

    return function getPageViewport(_x6) {
        return _ref5.apply(this, arguments);
    };
})();

let createClient = exports.createClient = (() => {
    var _ref7 = (0, _asyncToGenerator3.default)(function* (runtimeInfo) {
        const browserId = runtimeInfo.browserId,
              config = runtimeInfo.config,
              cdpPort = runtimeInfo.cdpPort;


        let tab = null;
        let client = null;

        try {
            tab = yield getActiveTab(cdpPort, browserId);

            if (!tab) return;

            client = yield (0, _chromeRemoteInterface2.default)({ target: tab, port: cdpPort });
        } catch (e) {
            return;
        }

        runtimeInfo.tab = tab;
        runtimeInfo.client = client;

        yield client.Page.enable();
        yield client.Network.enable();
        yield client.Runtime.enable();

        const devicePixelRatioQueryResult = yield client.Runtime.evaluate({ expression: 'window.devicePixelRatio' });

        runtimeInfo.originalDevicePixelRatio = devicePixelRatioQueryResult.result.value;
        runtimeInfo.emulatedDevicePixelRatio = config.scaleFactor || runtimeInfo.originalDevicePixelRatio;

        if (config.emulation) yield setEmulation(runtimeInfo);
    });

    return function createClient(_x7) {
        return _ref7.apply(this, arguments);
    };
})();

let closeTab = exports.closeTab = (() => {
    var _ref8 = (0, _asyncToGenerator3.default)(function* ({ tab, cdpPort }) {
        yield _chromeRemoteInterface2.default.closeTab({ id: tab.id, port: cdpPort });
    });

    return function closeTab(_x8) {
        return _ref8.apply(this, arguments);
    };
})();

let updateMobileViewportSize = exports.updateMobileViewportSize = (() => {
    var _ref9 = (0, _asyncToGenerator3.default)(function* (runtimeInfo) {
        const windowDimensionsQueryResult = yield runtimeInfo.client.Runtime.evaluate({
            expression: `(${_clientFunctions.GET_WINDOW_DIMENSIONS_INFO_SCRIPT})()`,
            returnByValue: true
        });

        const windowDimensions = windowDimensionsQueryResult.result.value;

        runtimeInfo.viewportSize.width = windowDimensions.outerWidth;
        runtimeInfo.viewportSize.height = windowDimensions.outerHeight;
    });

    return function updateMobileViewportSize(_x9) {
        return _ref9.apply(this, arguments);
    };
})();

let resizeWindow = exports.resizeWindow = (() => {
    var _ref10 = (0, _asyncToGenerator3.default)(function* (newDimensions, runtimeInfo) {
        const browserId = runtimeInfo.browserId,
              config = runtimeInfo.config,
              viewportSize = runtimeInfo.viewportSize,
              providerMethods = runtimeInfo.providerMethods;


        const currentWidth = viewportSize.width;
        const currentHeight = viewportSize.height;
        const newWidth = newDimensions.width || currentWidth;
        const newHeight = newDimensions.height || currentHeight;

        if (!config.headless) yield providerMethods.resizeLocalBrowserWindow(browserId, newWidth, newHeight, currentWidth, currentHeight);

        viewportSize.width = newWidth;
        viewportSize.height = newHeight;

        if (config.emulation) yield setEmulationBounds(runtimeInfo);
    });

    return function resizeWindow(_x10, _x11) {
        return _ref10.apply(this, arguments);
    };
})();

exports.isHeadlessTab = isHeadlessTab;

var _chromeRemoteInterface = require('chrome-remote-interface');

var _chromeRemoteInterface2 = _interopRequireDefault(_chromeRemoteInterface);

var _clientFunctions = require('../../utils/client-functions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isHeadlessTab({ tab, config }) {
    return tab && config.headless;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
