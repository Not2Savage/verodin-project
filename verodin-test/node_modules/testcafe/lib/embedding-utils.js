'use strict';

exports.__esModule = true;
const lazyRequire = require('import-lazy')(require);
const hammerhead = lazyRequire('testcafe-hammerhead');
const ReporterPluginHost = lazyRequire('./reporter/plugin-host');
const TestRunErrorFormattableAdapter = lazyRequire('./errors/test-run/formattable-adapter');
const testRunErrors = lazyRequire('./errors/test-run');
const COMMAND_TYPE = lazyRequire('./test-run/commands/type');
const getTestListModule = lazyRequire('./compiler/test-file/formats/es-next/get-test-list');
const getTypeScriptTestListModule = lazyRequire('./compiler/test-file/formats/typescript/get-test-list');
const getCoffeeScriptTestListModule = lazyRequire('./compiler/test-file/formats/coffeescript/get-test-list');
const initializers = lazyRequire('./test-run/commands/validations/initializers');
const errorTypes = lazyRequire('./error/types');
const createCommandFromObject = lazyRequire('./test-run/commands/from-object');
const processTestFnError = lazyRequire('./errors/process-test-fn-error');

// NOTE: we can't use lazy require for TestRun and Assignable, because it breaks prototype chain for inherited classes
let TestRun = null;
let Assignable = null;

exports.default = {
    TestRunErrorFormattableAdapter,
    testRunErrors,
    COMMAND_TYPE,
    errorTypes,

    get Assignable() {
        if (!Assignable) Assignable = require('./utils/assignable');

        return Assignable;
    },

    get TestRun() {
        if (!TestRun) TestRun = require('./test-run');

        return TestRun;
    },

    get getTestList() {
        return getTestListModule.getTestList;
    },

    get getTypeScriptTestList() {
        return getTypeScriptTestListModule.getTypeScriptTestList;
    },

    get getCoffeeScriptTestList() {
        return getCoffeeScriptTestListModule.getCoffeeScriptTestList;
    },

    get getTestListFromCode() {
        return getTestListModule.getTestListFromCode;
    },

    get getTypeScriptTestListFromCode() {
        return getTypeScriptTestListModule.getTypeScriptTestListFromCode;
    },

    get getCoffeeScriptTestListFromCode() {
        return getCoffeeScriptTestListModule.getCoffeeScriptTestListFromCode;
    },

    get initSelector() {
        return initializers.initSelector;
    },

    get createCommandFromObject() {
        return createCommandFromObject;
    },

    get processTestFnError() {
        return processTestFnError;
    },

    ensureUploadDirectory(...args) {
        return hammerhead.UploadStorage.ensureUploadsRoot(...args);
    },

    copyFilesToUploadFolder(...args) {
        return hammerhead.UploadStorage.copy(...args);
    },

    buildReporterPlugin(pluginFactory, outStream) {
        const plugin = pluginFactory();

        return new ReporterPluginHost(plugin, outStream);
    }
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbWJlZGRpbmctdXRpbHMuanMiXSwibmFtZXMiOlsibGF6eVJlcXVpcmUiLCJyZXF1aXJlIiwiaGFtbWVyaGVhZCIsIlJlcG9ydGVyUGx1Z2luSG9zdCIsIlRlc3RSdW5FcnJvckZvcm1hdHRhYmxlQWRhcHRlciIsInRlc3RSdW5FcnJvcnMiLCJDT01NQU5EX1RZUEUiLCJnZXRUZXN0TGlzdE1vZHVsZSIsImdldFR5cGVTY3JpcHRUZXN0TGlzdE1vZHVsZSIsImdldENvZmZlZVNjcmlwdFRlc3RMaXN0TW9kdWxlIiwiaW5pdGlhbGl6ZXJzIiwiZXJyb3JUeXBlcyIsImNyZWF0ZUNvbW1hbmRGcm9tT2JqZWN0IiwicHJvY2Vzc1Rlc3RGbkVycm9yIiwiVGVzdFJ1biIsIkFzc2lnbmFibGUiLCJnZXRUZXN0TGlzdCIsImdldFR5cGVTY3JpcHRUZXN0TGlzdCIsImdldENvZmZlZVNjcmlwdFRlc3RMaXN0IiwiZ2V0VGVzdExpc3RGcm9tQ29kZSIsImdldFR5cGVTY3JpcHRUZXN0TGlzdEZyb21Db2RlIiwiZ2V0Q29mZmVlU2NyaXB0VGVzdExpc3RGcm9tQ29kZSIsImluaXRTZWxlY3RvciIsImVuc3VyZVVwbG9hZERpcmVjdG9yeSIsImFyZ3MiLCJVcGxvYWRTdG9yYWdlIiwiZW5zdXJlVXBsb2Fkc1Jvb3QiLCJjb3B5RmlsZXNUb1VwbG9hZEZvbGRlciIsImNvcHkiLCJidWlsZFJlcG9ydGVyUGx1Z2luIiwicGx1Z2luRmFjdG9yeSIsIm91dFN0cmVhbSIsInBsdWdpbiJdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsTUFBTUEsY0FBaUNDLFFBQVEsYUFBUixFQUF1QkEsT0FBdkIsQ0FBdkM7QUFDQSxNQUFNQyxhQUFpQ0YsWUFBWSxxQkFBWixDQUF2QztBQUNBLE1BQU1HLHFCQUFpQ0gsWUFBWSx3QkFBWixDQUF2QztBQUNBLE1BQU1JLGlDQUFpQ0osWUFBWSx1Q0FBWixDQUF2QztBQUNBLE1BQU1LLGdCQUFpQ0wsWUFBWSxtQkFBWixDQUF2QztBQUNBLE1BQU1NLGVBQWlDTixZQUFZLDBCQUFaLENBQXZDO0FBQ0EsTUFBTU8sb0JBQWlDUCxZQUFZLG9EQUFaLENBQXZDO0FBQ0EsTUFBTVEsOEJBQWlDUixZQUFZLHVEQUFaLENBQXZDO0FBQ0EsTUFBTVMsZ0NBQWlDVCxZQUFZLHlEQUFaLENBQXZDO0FBQ0EsTUFBTVUsZUFBaUNWLFlBQVksOENBQVosQ0FBdkM7QUFDQSxNQUFNVyxhQUFpQ1gsWUFBWSxlQUFaLENBQXZDO0FBQ0EsTUFBTVksMEJBQWlDWixZQUFZLGlDQUFaLENBQXZDO0FBQ0EsTUFBTWEscUJBQWlDYixZQUFZLGdDQUFaLENBQXZDOztBQUVBO0FBQ0EsSUFBSWMsVUFBYSxJQUFqQjtBQUNBLElBQUlDLGFBQWEsSUFBakI7O2tCQUVlO0FBQ1hYLGtDQURXO0FBRVhDLGlCQUZXO0FBR1hDLGdCQUhXO0FBSVhLLGNBSlc7O0FBTVgsUUFBSUksVUFBSixHQUFrQjtBQUNkLFlBQUksQ0FBQ0EsVUFBTCxFQUNJQSxhQUFhZCxRQUFRLG9CQUFSLENBQWI7O0FBRUosZUFBT2MsVUFBUDtBQUNILEtBWFU7O0FBYVgsUUFBSUQsT0FBSixHQUFlO0FBQ1gsWUFBSSxDQUFDQSxPQUFMLEVBQ0lBLFVBQVViLFFBQVEsWUFBUixDQUFWOztBQUVKLGVBQU9hLE9BQVA7QUFDSCxLQWxCVTs7QUFvQlgsUUFBSUUsV0FBSixHQUFtQjtBQUNmLGVBQU9ULGtCQUFrQlMsV0FBekI7QUFDSCxLQXRCVTs7QUF3QlgsUUFBSUMscUJBQUosR0FBNkI7QUFDekIsZUFBT1QsNEJBQTRCUyxxQkFBbkM7QUFDSCxLQTFCVTs7QUE0QlgsUUFBSUMsdUJBQUosR0FBK0I7QUFDM0IsZUFBT1QsOEJBQThCUyx1QkFBckM7QUFDSCxLQTlCVTs7QUFnQ1gsUUFBSUMsbUJBQUosR0FBMkI7QUFDdkIsZUFBT1osa0JBQWtCWSxtQkFBekI7QUFDSCxLQWxDVTs7QUFvQ1gsUUFBSUMsNkJBQUosR0FBcUM7QUFDakMsZUFBT1osNEJBQTRCWSw2QkFBbkM7QUFDSCxLQXRDVTs7QUF3Q1gsUUFBSUMsK0JBQUosR0FBdUM7QUFDbkMsZUFBT1osOEJBQThCWSwrQkFBckM7QUFDSCxLQTFDVTs7QUE0Q1gsUUFBSUMsWUFBSixHQUFvQjtBQUNoQixlQUFPWixhQUFhWSxZQUFwQjtBQUNILEtBOUNVOztBQWdEWCxRQUFJVix1QkFBSixHQUErQjtBQUMzQixlQUFPQSx1QkFBUDtBQUNILEtBbERVOztBQW9EWCxRQUFJQyxrQkFBSixHQUEwQjtBQUN0QixlQUFPQSxrQkFBUDtBQUNILEtBdERVOztBQXdEWFUsMEJBQXVCLEdBQUdDLElBQTFCLEVBQWdDO0FBQzVCLGVBQU90QixXQUFXdUIsYUFBWCxDQUF5QkMsaUJBQXpCLENBQTJDLEdBQUdGLElBQTlDLENBQVA7QUFDSCxLQTFEVTs7QUE0RFhHLDRCQUF5QixHQUFHSCxJQUE1QixFQUFrQztBQUM5QixlQUFPdEIsV0FBV3VCLGFBQVgsQ0FBeUJHLElBQXpCLENBQThCLEdBQUdKLElBQWpDLENBQVA7QUFDSCxLQTlEVTs7QUFnRVhLLHdCQUFxQkMsYUFBckIsRUFBb0NDLFNBQXBDLEVBQStDO0FBQzNDLGNBQU1DLFNBQVNGLGVBQWY7O0FBRUEsZUFBTyxJQUFJM0Isa0JBQUosQ0FBdUI2QixNQUF2QixFQUErQkQsU0FBL0IsQ0FBUDtBQUNIO0FBcEVVLEMiLCJmaWxlIjoiZW1iZWRkaW5nLXV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbGF6eVJlcXVpcmUgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnaW1wb3J0LWxhenknKShyZXF1aXJlKTtcbmNvbnN0IGhhbW1lcmhlYWQgICAgICAgICAgICAgICAgICAgICA9IGxhenlSZXF1aXJlKCd0ZXN0Y2FmZS1oYW1tZXJoZWFkJyk7XG5jb25zdCBSZXBvcnRlclBsdWdpbkhvc3QgICAgICAgICAgICAgPSBsYXp5UmVxdWlyZSgnLi9yZXBvcnRlci9wbHVnaW4taG9zdCcpO1xuY29uc3QgVGVzdFJ1bkVycm9yRm9ybWF0dGFibGVBZGFwdGVyID0gbGF6eVJlcXVpcmUoJy4vZXJyb3JzL3Rlc3QtcnVuL2Zvcm1hdHRhYmxlLWFkYXB0ZXInKTtcbmNvbnN0IHRlc3RSdW5FcnJvcnMgICAgICAgICAgICAgICAgICA9IGxhenlSZXF1aXJlKCcuL2Vycm9ycy90ZXN0LXJ1bicpO1xuY29uc3QgQ09NTUFORF9UWVBFICAgICAgICAgICAgICAgICAgID0gbGF6eVJlcXVpcmUoJy4vdGVzdC1ydW4vY29tbWFuZHMvdHlwZScpO1xuY29uc3QgZ2V0VGVzdExpc3RNb2R1bGUgICAgICAgICAgICAgID0gbGF6eVJlcXVpcmUoJy4vY29tcGlsZXIvdGVzdC1maWxlL2Zvcm1hdHMvZXMtbmV4dC9nZXQtdGVzdC1saXN0Jyk7XG5jb25zdCBnZXRUeXBlU2NyaXB0VGVzdExpc3RNb2R1bGUgICAgPSBsYXp5UmVxdWlyZSgnLi9jb21waWxlci90ZXN0LWZpbGUvZm9ybWF0cy90eXBlc2NyaXB0L2dldC10ZXN0LWxpc3QnKTtcbmNvbnN0IGdldENvZmZlZVNjcmlwdFRlc3RMaXN0TW9kdWxlICA9IGxhenlSZXF1aXJlKCcuL2NvbXBpbGVyL3Rlc3QtZmlsZS9mb3JtYXRzL2NvZmZlZXNjcmlwdC9nZXQtdGVzdC1saXN0Jyk7XG5jb25zdCBpbml0aWFsaXplcnMgICAgICAgICAgICAgICAgICAgPSBsYXp5UmVxdWlyZSgnLi90ZXN0LXJ1bi9jb21tYW5kcy92YWxpZGF0aW9ucy9pbml0aWFsaXplcnMnKTtcbmNvbnN0IGVycm9yVHlwZXMgICAgICAgICAgICAgICAgICAgICA9IGxhenlSZXF1aXJlKCcuL2Vycm9yL3R5cGVzJyk7XG5jb25zdCBjcmVhdGVDb21tYW5kRnJvbU9iamVjdCAgICAgICAgPSBsYXp5UmVxdWlyZSgnLi90ZXN0LXJ1bi9jb21tYW5kcy9mcm9tLW9iamVjdCcpO1xuY29uc3QgcHJvY2Vzc1Rlc3RGbkVycm9yICAgICAgICAgICAgID0gbGF6eVJlcXVpcmUoJy4vZXJyb3JzL3Byb2Nlc3MtdGVzdC1mbi1lcnJvcicpO1xuXG4vLyBOT1RFOiB3ZSBjYW4ndCB1c2UgbGF6eSByZXF1aXJlIGZvciBUZXN0UnVuIGFuZCBBc3NpZ25hYmxlLCBiZWNhdXNlIGl0IGJyZWFrcyBwcm90b3R5cGUgY2hhaW4gZm9yIGluaGVyaXRlZCBjbGFzc2VzXG5sZXQgVGVzdFJ1biAgICA9IG51bGw7XG5sZXQgQXNzaWduYWJsZSA9IG51bGw7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBUZXN0UnVuRXJyb3JGb3JtYXR0YWJsZUFkYXB0ZXIsXG4gICAgdGVzdFJ1bkVycm9ycyxcbiAgICBDT01NQU5EX1RZUEUsXG4gICAgZXJyb3JUeXBlcyxcblxuICAgIGdldCBBc3NpZ25hYmxlICgpIHtcbiAgICAgICAgaWYgKCFBc3NpZ25hYmxlKVxuICAgICAgICAgICAgQXNzaWduYWJsZSA9IHJlcXVpcmUoJy4vdXRpbHMvYXNzaWduYWJsZScpO1xuXG4gICAgICAgIHJldHVybiBBc3NpZ25hYmxlO1xuICAgIH0sXG5cbiAgICBnZXQgVGVzdFJ1biAoKSB7XG4gICAgICAgIGlmICghVGVzdFJ1bilcbiAgICAgICAgICAgIFRlc3RSdW4gPSByZXF1aXJlKCcuL3Rlc3QtcnVuJyk7XG5cbiAgICAgICAgcmV0dXJuIFRlc3RSdW47XG4gICAgfSxcblxuICAgIGdldCBnZXRUZXN0TGlzdCAoKSB7XG4gICAgICAgIHJldHVybiBnZXRUZXN0TGlzdE1vZHVsZS5nZXRUZXN0TGlzdDtcbiAgICB9LFxuXG4gICAgZ2V0IGdldFR5cGVTY3JpcHRUZXN0TGlzdCAoKSB7XG4gICAgICAgIHJldHVybiBnZXRUeXBlU2NyaXB0VGVzdExpc3RNb2R1bGUuZ2V0VHlwZVNjcmlwdFRlc3RMaXN0O1xuICAgIH0sXG5cbiAgICBnZXQgZ2V0Q29mZmVlU2NyaXB0VGVzdExpc3QgKCkge1xuICAgICAgICByZXR1cm4gZ2V0Q29mZmVlU2NyaXB0VGVzdExpc3RNb2R1bGUuZ2V0Q29mZmVlU2NyaXB0VGVzdExpc3Q7XG4gICAgfSxcblxuICAgIGdldCBnZXRUZXN0TGlzdEZyb21Db2RlICgpIHtcbiAgICAgICAgcmV0dXJuIGdldFRlc3RMaXN0TW9kdWxlLmdldFRlc3RMaXN0RnJvbUNvZGU7XG4gICAgfSxcblxuICAgIGdldCBnZXRUeXBlU2NyaXB0VGVzdExpc3RGcm9tQ29kZSAoKSB7XG4gICAgICAgIHJldHVybiBnZXRUeXBlU2NyaXB0VGVzdExpc3RNb2R1bGUuZ2V0VHlwZVNjcmlwdFRlc3RMaXN0RnJvbUNvZGU7XG4gICAgfSxcblxuICAgIGdldCBnZXRDb2ZmZWVTY3JpcHRUZXN0TGlzdEZyb21Db2RlICgpIHtcbiAgICAgICAgcmV0dXJuIGdldENvZmZlZVNjcmlwdFRlc3RMaXN0TW9kdWxlLmdldENvZmZlZVNjcmlwdFRlc3RMaXN0RnJvbUNvZGU7XG4gICAgfSxcblxuICAgIGdldCBpbml0U2VsZWN0b3IgKCkge1xuICAgICAgICByZXR1cm4gaW5pdGlhbGl6ZXJzLmluaXRTZWxlY3RvcjtcbiAgICB9LFxuXG4gICAgZ2V0IGNyZWF0ZUNvbW1hbmRGcm9tT2JqZWN0ICgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNvbW1hbmRGcm9tT2JqZWN0O1xuICAgIH0sXG5cbiAgICBnZXQgcHJvY2Vzc1Rlc3RGbkVycm9yICgpIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3NUZXN0Rm5FcnJvcjtcbiAgICB9LFxuXG4gICAgZW5zdXJlVXBsb2FkRGlyZWN0b3J5ICguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiBoYW1tZXJoZWFkLlVwbG9hZFN0b3JhZ2UuZW5zdXJlVXBsb2Fkc1Jvb3QoLi4uYXJncyk7XG4gICAgfSxcblxuICAgIGNvcHlGaWxlc1RvVXBsb2FkRm9sZGVyICguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiBoYW1tZXJoZWFkLlVwbG9hZFN0b3JhZ2UuY29weSguLi5hcmdzKTtcbiAgICB9LFxuXG4gICAgYnVpbGRSZXBvcnRlclBsdWdpbiAocGx1Z2luRmFjdG9yeSwgb3V0U3RyZWFtKSB7XG4gICAgICAgIGNvbnN0IHBsdWdpbiA9IHBsdWdpbkZhY3RvcnkoKTtcblxuICAgICAgICByZXR1cm4gbmV3IFJlcG9ydGVyUGx1Z2luSG9zdChwbHVnaW4sIG91dFN0cmVhbSk7XG4gICAgfVxufTtcbiJdfQ==
